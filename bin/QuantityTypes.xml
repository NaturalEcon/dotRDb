<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantityTypes</name>
    </assembly>
    <members>
        <member name="T:QuantityTypes.IQuantity">
            <summary>
            Defines a quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.IQuantity.ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.IQuantity.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.IQuantity.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="P:QuantityTypes.IQuantity.Value">
            <summary>
            Gets the amount of quantity in the base unit.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:QuantityTypes.IQuantity`1">
            <summary>
            Defines functionality for unit conversion.
            </summary>
            <typeparam name="T">The quantity type.</typeparam>
        </member>
        <member name="M:QuantityTypes.IQuantity`1.ConvertTo(`0)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="T:QuantityTypes.Mathematics">
            <summary>
            Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.
            </summary>
        </member>
        <member name="M:QuantityTypes.Mathematics.Sin(QuantityTypes.Angle)">
            <summary>
            Calculates the sine of the specified angle.
            </summary>
            <param name="a">The angle.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Cos(QuantityTypes.Angle)">
            <summary>
            Calculates the cosine of the specified angle.
            </summary>
            <param name="a">The angle.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Tan(QuantityTypes.Angle)">
            <summary>
            Calculates the tangent of the specified angle.
            </summary>
            <param name="a">The angle.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Acos(System.Double)">
            <summary>
            Calculates the arc cosine of the specified value.
            </summary>
            <param name="d">The value.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Asin(System.Double)">
            <summary>
            Calculates the arc sine of the specified value.
            </summary>
            <param name="d">The value.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Atan(System.Double)">
            <summary>
            Calculates the arc tangent of the specified value.
            </summary>
            <param name="d">The value.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Atan2(System.Double,System.Double)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Sqrt(QuantityTypes.Area)">
            <summary>
            Returns the square root of a specified area.
            </summary>
            <param name="a">The area.</param>
            <returns>The positive square root of the area.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Sqrt(QuantityTypes.TimeSquared)">
            <summary>
            Returns the square root of a specified time squared.
            </summary>
            <param name="a">The squared time.</param>
            <returns>The positive square root of the time squared.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Sqrt(QuantityTypes.VelocitySquared)">
            <summary>
            Returns the square root of a specified time squared.
            </summary>
            <param name="a">The squared velocity.</param>
            <returns>The positive square root of the area.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Abs``1(``0)">
            <summary>
            Returns the absolute value of a quantity.
            </summary>
            <typeparam name="T">The quantity type</typeparam>
            <param name="a">The quantity.</param>
            <returns>The absolute value of the quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Mathematics.Sign``1(``0)">
            <summary>
            Returns a value indicating the sign of a quantity.
            </summary>
            <typeparam name="T">The quantity type</typeparam>
            <param name="a">A signed quantity.</param>
            <returns>A number that indicates the sign of value.</returns>
        </member>
        <member name="T:QuantityTypes.Utilities">
            <summary>
            Provides utility methods for quantity processing.
            </summary>
        </member>
        <member name="M:QuantityTypes.Utilities.TrySplit(System.String,System.IFormatProvider,System.Double@,System.String@)">
            <summary>
            Converts the string representation of a quantity to its <see cref="T:System.Double"/> value and <see cref="T:System.String"/> unit equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="s"/>.</param>
            <param name="resultValue">When this method returns, contains a double-precision floating-point number equivalent of the numeric value contained in s. This parameter is passed uninitialized.</param>
            <param name="resultUnit">When this method returns, contains a string equivalent of the unit contained in s. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:QuantityTypes.Dynamic.DynamicQuantity">
            <summary>
            Represents a dynamic quantity with value and dimensions.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.DynamicQuantity.value">
            <summary>
            The value of the quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.DynamicQuantity.dim">
            <summary>
            The dimensions of the quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.#cctor">
            <summary>
            Initializes static members of the <see cref="T:QuantityTypes.Dynamic.DynamicQuantity"/> struct.
            </summary>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.#ctor(System.Double,QuantityTypes.Dynamic.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Dynamic.DynamicQuantity"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="dim">The dimensions.</param>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.op_Addition(QuantityTypes.Dynamic.DynamicQuantity,QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="q1">The q1.</param>
            <param name="q2">The q2.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.InvalidOperationException">Not compatible dimensions</exception>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.op_Subtraction(QuantityTypes.Dynamic.DynamicQuantity,QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="q1">The q1.</param>
            <param name="q2">The q2.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.InvalidOperationException">Not compatible dimensions</exception>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.op_UnaryNegation(QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Implements the -.
            </summary>
            <param name="q1">The q1.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.op_Multiply(QuantityTypes.Dynamic.DynamicQuantity,QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Implements the *.
            </summary>
            <param name="q1">The q1.</param>
            <param name="q2">The q2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.op_Multiply(System.Double,QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Implements the *.
            </summary>
            <param name="q1">The q1.</param>
            <param name="q2">The q2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.op_Division(QuantityTypes.Dynamic.DynamicQuantity,QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Implements the /.
            </summary>
            <param name="q1">The q1.</param>
            <param name="q2">The q2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.TryParse(System.String,QuantityTypes.Dynamic.DynamicQuantity@,System.IFormatProvider)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="q">The output quantity.</param>
            <param name="provider">The provider.</param>
            <returns><c>true</c> if parsing was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="provider">The provider.</param>
            <returns>DynamicQuantity.</returns>
            <exception cref="T:System.FormatException">Could not parse  + s</exception>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.CompareTo(QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot compare different dimensions.</exception>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.Equals(QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.ConvertTo(QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The value in the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicQuantity.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:QuantityTypes.Dynamic.DynamicQuantity.UnitProvider">
            <summary>
            Gets or sets the unit provider.
            </summary>
            <value>The unit provider.</value>
        </member>
        <member name="P:QuantityTypes.Dynamic.DynamicQuantity.Dimensions">
            <summary>
            Gets the dimensions.
            </summary>
            <value>The dimensions.</value>
        </member>
        <member name="P:QuantityTypes.Dynamic.DynamicQuantity.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:QuantityTypes.Dynamic.DynamicUnitProvider">
            <summary>
            Provides units for the dynamic quantities.
            </summary>
        </member>
        <member name="T:QuantityTypes.Dynamic.IDynamicUnitProvider">
            <summary>
            Defines functionality to get units for dynamic quantities.
            </summary>
        </member>
        <member name="M:QuantityTypes.Dynamic.IDynamicUnitProvider.TryGetUnit(System.String,QuantityTypes.Dynamic.DynamicQuantity@)">
            <summary>
            Tries to get the unit for the specified symbol.
            </summary>
            <param name="s">The symbol.</param>
            <param name="q">The unit.</param>
            <returns><c>true</c> if the unit was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.IDynamicUnitProvider.TryGetDisplayUnit(QuantityTypes.Dynamic.Dimensions,System.String@,QuantityTypes.Dynamic.DynamicQuantity@)">
            <summary>
            Tries to get the display unit for the specified dimension.
            </summary>
            <param name="d">The dimension.</param>
            <param name="symbol">The symbol.</param>
            <param name="q">The unit.</param>
            <returns><c>true</c> if the unit was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:QuantityTypes.Dynamic.DynamicUnitProvider.provider">
            <summary>
            The format provider.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.DynamicUnitProvider.units">
            <summary>
            The units
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.DynamicUnitProvider.displayUnits">
            <summary>
            The display units
            </summary>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicUnitProvider.#ctor(System.IFormatProvider,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Dynamic.DynamicUnitProvider"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicUnitProvider.Register(System.String,QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Registers the specified unit.
            </summary>
            <param name="s">The symbol.</param>
            <param name="q">The unit.</param>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicUnitProvider.TryGetUnit(System.String,QuantityTypes.Dynamic.DynamicQuantity@)">
            <summary>
            Tries to get the unit for the specified symbol.
            </summary>
            <param name="s">The symbol.</param>
            <param name="q">The unit.</param>
            <returns><c>true</c> if the unit was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicUnitProvider.TryGetDisplayUnit(QuantityTypes.Dynamic.Dimensions,System.String@,QuantityTypes.Dynamic.DynamicQuantity@)">
            <summary>
            Tries to get the display unit for the specified dimension.
            </summary>
            <param name="d">The dimension.</param>
            <param name="symbol">The symbol.</param>
            <param name="q">The unit.</param>
            <returns><c>true</c> if the unit was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicUnitProvider.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, null.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicUnitProvider.Register(System.Type)">
            <summary>
            Registers the units declared in the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:QuantityTypes.Dynamic.DynamicUnitProvider.SetDisplayUnit(System.String,QuantityTypes.Dynamic.DynamicQuantity)">
            <summary>
            Sets the display unit.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="dynamicQuantity">The dynamic quantity.</param>
        </member>
        <member name="T:QuantityTypes.Dynamic.Imperial">
            <summary>
            Provides (British) Imperial units
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Thou">
            <summary>
            The Thou length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Inch">
            <summary>
            The Inch length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Foot">
            <summary>
            The Foot length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Yard">
            <summary>
            The Yard length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Chain">
            <summary>
            The Chain length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Furlong">
            <summary>
            The Furlong length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Mile">
            <summary>
            The Mile length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.League">
            <summary>
            The League length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Fathom">
            <summary>
            The Fathom length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Cable">
            <summary>
            The Cable length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.NauticalMile">
            <summary>
            The Nautical mile length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Link">
            <summary>
            The Link length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Rod">
            <summary>
            The Rod length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Chain2">
            <summary>
            The Chain length unit.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Imperial.Gallon">
            <summary>
            The Gallon volume unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Dynamic.SI">
            <summary>
            Defines SI units.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.kilogram">
            <summary>
            The kilogram unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.metre">
            <summary>
            The meter unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.Kilometre">
            <summary>
            The kilometer unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.Centimetre">
            <summary>
            The centimeter unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.Millimetre">
            <summary>
            The millimeter unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.Second">
            <summary>
            The second unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.Minute">
            <summary>
            The minute unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.Hour">
            <summary>
            The hour unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.metrePerSecond">
            <summary>
            The m/s unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.kilometrePerHour">
            <summary>
            The km/h unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.MetrePerSecondSquared">
            <summary>
            The m/s^2 unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.SquareMetre">
            <summary>
            The m^2 unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.CubicMetre">
            <summary>
            The m^3 unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.CubicDecimetre">
            <summary>
            The dm^3 unit
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.SI.Litre">
            <summary>
            The liter unit
            </summary>
        </member>
        <member name="P:QuantityTypes.Dynamic.SI.Kilogram">
            <summary>
            Gets the kilogram.
            </summary>
            <value>The kilogram.</value>
        </member>
        <member name="P:QuantityTypes.Dynamic.SI.Metre">
            <summary>
            Gets the meter unit.
            </summary>
            <value>The meter unit.</value>
        </member>
        <member name="P:QuantityTypes.Dynamic.SI.MetrePerSecond">
            <summary>
            Gets the meter per second.
            </summary>
            <value>The meter per second.</value>
        </member>
        <member name="P:QuantityTypes.Dynamic.SI.KilometrePerHour">
            <summary>
            Gets the kilometer per hour.
            </summary>
            <value>The kilometer per hour.</value>
        </member>
        <member name="T:QuantityTypes.Dynamic.Customary">
            <summary>
            Provides United States customary units.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Customary.Gallon">
            <summary>
            The gallon unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Dynamic.Dimensions">
            <summary>
            Represents the dimensions of a quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Dimensions.mass">
            <summary>
            The mass dimension.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Dimensions.length">
            <summary>
            The length dimension.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Dimensions.time">
            <summary>
            The time dimension.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Dimensions.current">
            <summary>
            The current dimension.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Dimensions.temperature">
            <summary>
            The temperature dimension.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Dimensions.amountOfSubstance">
            <summary>
            The amount of substance dimension.
            </summary>
        </member>
        <member name="F:QuantityTypes.Dynamic.Dimensions.luminousIntensity">
            <summary>
            The luminous intensity dimension.
            </summary>
        </member>
        <member name="M:QuantityTypes.Dynamic.Dimensions.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Dynamic.Dimensions"/> struct.
            </summary>
            <param name="mass">The mass dimension.</param>
            <param name="length">The length dimension.</param>
            <param name="time">The time dimension.</param>
            <param name="current">The current dimension.</param>
            <param name="temperature">The temperature dimension.</param>
            <param name="amount">The amount dimension.</param>
            <param name="intensity">The intensity dimension.</param>
        </member>
        <member name="M:QuantityTypes.Dynamic.Dimensions.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Dynamic.Dimensions"/> struct.
            </summary>
            <param name="mass">The mass dimension.</param>
            <param name="length">The length dimension.</param>
            <param name="time">The time dimension.</param>
            <param name="current">The current dimension.</param>
            <param name="temperature">The temperature dimension.</param>
            <param name="amount">The amount dimension.</param>
            <param name="intensity">The intensity dimension.</param>
        </member>
        <member name="M:QuantityTypes.Dynamic.Dimensions.op_Addition(QuantityTypes.Dynamic.Dimensions,QuantityTypes.Dynamic.Dimensions)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="q1">The q1.</param>
            <param name="q2">The q2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.Dimensions.op_Subtraction(QuantityTypes.Dynamic.Dimensions,QuantityTypes.Dynamic.Dimensions)">
            <summary>
            Implements the -.
            </summary>
            <param name="q1">The q1.</param>
            <param name="q2">The q2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.Dimensions.Equals(QuantityTypes.Dynamic.Dimensions)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:QuantityTypes.Dynamic.Dimensions.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:QuantityTypes.Dynamic.Dimensions.Length">
            <summary>
            Gets the length dimension.
            </summary>
            <value>The length dimension.</value>
        </member>
        <member name="P:QuantityTypes.Dynamic.Dimensions.Time">
            <summary>
            Gets the time dimension.
            </summary>
            <value>The time dimension.</value>
        </member>
        <member name="T:QuantityTypes.QuantityExtensions">
            <summary>
            Provides extension methods for quantities.
            </summary>
        </member>
        <member name="M:QuantityTypes.QuantityExtensions.ConvertOrDefault``1(System.Nullable{``0},``0,``0)">
            <summary>
            Converts the input value to the specified unit or returns the converted default value if the input value is null.
            </summary>
            <typeparam name="T">
            The type of the quantity.
            </typeparam>
            <param name="value">
            The input quantity value.
            </param>
            <param name="unit">
            The unit.
            </param>
            <param name="defaultValue">
            The default value.
            </param>
            <returns>
            The converted quantity.
            </returns>
        </member>
        <member name="M:QuantityTypes.QuantityExtensions.ConvertOrDefault``1(System.Nullable{``0},``0,System.Double)">
            <summary>
            Converts the input value to the specified unit or returns the default value if the input value is null.
            </summary>
            <typeparam name="T">
            The type of the quantity.
            </typeparam>
            <param name="value">
            The input quantity value.
            </param>
            <param name="unit">
            The unit.
            </param>
            <param name="defaultValue">
            The default value.
            </param>
            <returns>
            The converted quantity.
            </returns>
        </member>
        <member name="M:QuantityTypes.QuantityExtensions.ConvertTo``1(System.Nullable{``0},``0)">
            <summary>
            Converts the input value to the specified unit or returns NaN if the input value is null.
            </summary>
            <typeparam name="T">
            The type of the quantity.
            </typeparam>
            <param name="value">
            The input quantity value.
            </param>
            <param name="unit">
            The unit.
            </param>
            <returns>
            The converted quantity.
            </returns>
        </member>
        <member name="M:QuantityTypes.QuantityExtensions.ConvertOrThrow``1(System.Nullable{``0},``0)">
            <summary>
            Converts the specified value to the specified unit or throws an exception if the input value is null.
            </summary>
            <typeparam name="T">
            The type of the quantity.
            </typeparam>
            <param name="value">
            The input quantity value.
            </param>
            <param name="unit">
            The unit.
            </param>
            <returns>
            The converted quantity.
            </returns>
            <exception cref="T:System.Exception">
            Cannot convert <c>null</c> quantity.
            </exception>
        </member>
        <member name="T:QuantityTypes.MassMomentOfInertia">
            <summary>
            Provides operators related to mass moment of inertia.
            </summary>
            <summary>
            Represents the mass moment of inertia quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Division(QuantityTypes.MassMomentOfInertia,QuantityTypes.Area)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="i">The moment of inertia.</param>
            <param name="a">The area.</param>
            <returns>
            The mass.
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Division(QuantityTypes.MassMomentOfInertia,QuantityTypes.Mass)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="i">The moment of inertia.</param>
            <param name="m">The mass.</param>
            <returns>
            The area.
            </returns>
        </member>
        <member name="F:QuantityTypes.MassMomentOfInertia.KilogramMetreSquaredField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.MassMomentOfInertia.KilogramMetreSquared"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.MassMomentOfInertia.PoundInchSquaredField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.MassMomentOfInertia.PoundInchSquared"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.MassMomentOfInertia.PoundFootSquaredField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.MassMomentOfInertia.PoundFootSquared"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.MassMomentOfInertia.PoundforceInchSecondSquaredField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.MassMomentOfInertia.PoundforceInchSecondSquared"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.MassMomentOfInertia.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.MassMomentOfInertia"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.MassMomentOfInertia"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.MassMomentOfInertia"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.MassMomentOfInertia"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.MassMomentOfInertia@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.MassMomentOfInertia"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Addition(QuantityTypes.MassMomentOfInertia,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Division(QuantityTypes.MassMomentOfInertia,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Division(QuantityTypes.MassMomentOfInertia,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Equality(QuantityTypes.MassMomentOfInertia,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_GreaterThan(QuantityTypes.MassMomentOfInertia,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_GreaterThanOrEqual(QuantityTypes.MassMomentOfInertia,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Inequality(QuantityTypes.MassMomentOfInertia,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_LessThan(QuantityTypes.MassMomentOfInertia,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_LessThanOrEqual(QuantityTypes.MassMomentOfInertia,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Multiply(System.Double,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Multiply(QuantityTypes.MassMomentOfInertia,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_Subtraction(QuantityTypes.MassMomentOfInertia,QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_UnaryPlus(QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.op_UnaryNegation(QuantityTypes.MassMomentOfInertia)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.CompareTo(QuantityTypes.MassMomentOfInertia)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.MassMomentOfInertia"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.MassMomentOfInertia"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.ConvertTo(QuantityTypes.MassMomentOfInertia)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.Equals(QuantityTypes.MassMomentOfInertia)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.MassMomentOfInertia"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.MassMomentOfInertia"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MassMomentOfInertia.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.MassMomentOfInertia.KilogramMetreSquared">
            <summary>
            Gets the "kg*m^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.MassMomentOfInertia.PoundInchSquared">
            <summary>
            Gets the "lb*in^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.MassMomentOfInertia.PoundFootSquared">
            <summary>
            Gets the "lb*ft^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.MassMomentOfInertia.PoundforceInchSecondSquared">
            <summary>
            Gets the "lbf*in*s^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.MassMomentOfInertia.XmlValue">
            <summary>
            Gets or sets the mass moment of inertia as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.MassMomentOfInertia.Value">
            <summary>
            Gets the value of the mass moment of inertia in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.TypographicLength">
            <summary>
            Represents the typographic length quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Division(System.Double,QuantityTypes.TypographicLength)">
            <summary>
            Divides a number of dots by a length to get the resolution.
            </summary>
            <param name="x"> The number of dots. </param>
            <param name="y"> The length. </param>
            <returns> The resolution. </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Multiply(QuantityTypes.TypographicLength,QuantityTypes.TypographicResolution)">
            <summary>
            Multiplies a <see cref="T:QuantityTypes.TypographicLength"/> with a <see cref="T:QuantityTypes.TypographicResolution"/> to get the number of dots.
            </summary>
            <param name="x"> The length. </param>
            <param name="y"> The resolution. </param>
            <returns> The number of dots. </returns>
        </member>
        <member name="F:QuantityTypes.TypographicLength.CentimetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TypographicLength.Centimetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TypographicLength.PointField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TypographicLength.Point"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TypographicLength.MillimetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TypographicLength.Millimetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TypographicLength.MetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TypographicLength.Metre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TypographicLength.InchField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TypographicLength.Inch"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TypographicLength.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.TypographicLength.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.TypographicLength"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.TypographicLength.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.TypographicLength"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.TypographicLength.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.TypographicLength"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.TypographicLength"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.TypographicLength@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.TypographicLength"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Addition(QuantityTypes.TypographicLength,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Division(QuantityTypes.TypographicLength,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Division(QuantityTypes.TypographicLength,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Equality(QuantityTypes.TypographicLength,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_GreaterThan(QuantityTypes.TypographicLength,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_GreaterThanOrEqual(QuantityTypes.TypographicLength,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Inequality(QuantityTypes.TypographicLength,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_LessThan(QuantityTypes.TypographicLength,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_LessThanOrEqual(QuantityTypes.TypographicLength,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Multiply(System.Double,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Multiply(QuantityTypes.TypographicLength,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_Subtraction(QuantityTypes.TypographicLength,QuantityTypes.TypographicLength)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_UnaryPlus(QuantityTypes.TypographicLength)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.op_UnaryNegation(QuantityTypes.TypographicLength)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.CompareTo(QuantityTypes.TypographicLength)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.TypographicLength"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.TypographicLength"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.ConvertTo(QuantityTypes.TypographicLength)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.Equals(QuantityTypes.TypographicLength)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.TypographicLength"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.TypographicLength"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.TypographicLength.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicLength.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.TypographicLength.Centimetre">
            <summary>
            Gets the "cm" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TypographicLength.Point">
            <summary>
            Gets the "pt" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TypographicLength.Millimetre">
            <summary>
            Gets the "mm" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TypographicLength.Metre">
            <summary>
            Gets the "m" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TypographicLength.Inch">
            <summary>
            Gets the "in" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TypographicLength.XmlValue">
            <summary>
            Gets or sets the typographic length as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.TypographicLength.Value">
            <summary>
            Gets the value of the typographic length in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.TypographicResolution">
            <summary>
            Represents the typographic resolution quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Division(System.Double,QuantityTypes.TypographicResolution)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Multiply(QuantityTypes.TypographicResolution,QuantityTypes.TypographicLength)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.TypographicResolution.DotsPerInchField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TypographicResolution.DotsPerInch"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TypographicResolution.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.TypographicResolution"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.TypographicResolution"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.TypographicResolution"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.TypographicResolution"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.TypographicResolution@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.TypographicResolution"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Addition(QuantityTypes.TypographicResolution,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Division(QuantityTypes.TypographicResolution,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Division(QuantityTypes.TypographicResolution,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Equality(QuantityTypes.TypographicResolution,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_GreaterThan(QuantityTypes.TypographicResolution,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_GreaterThanOrEqual(QuantityTypes.TypographicResolution,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Inequality(QuantityTypes.TypographicResolution,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_LessThan(QuantityTypes.TypographicResolution,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_LessThanOrEqual(QuantityTypes.TypographicResolution,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Multiply(System.Double,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Multiply(QuantityTypes.TypographicResolution,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_Subtraction(QuantityTypes.TypographicResolution,QuantityTypes.TypographicResolution)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_UnaryPlus(QuantityTypes.TypographicResolution)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.op_UnaryNegation(QuantityTypes.TypographicResolution)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.CompareTo(QuantityTypes.TypographicResolution)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.TypographicResolution"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.TypographicResolution"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.ConvertTo(QuantityTypes.TypographicResolution)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.Equals(QuantityTypes.TypographicResolution)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.TypographicResolution"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.TypographicResolution"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TypographicResolution.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.TypographicResolution.DotsPerInch">
            <summary>
            Gets the "dpi" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TypographicResolution.XmlValue">
            <summary>
            Gets or sets the typographic resolution as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.TypographicResolution.Value">
            <summary>
            Gets the value of the typographic resolution in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.TimeSquared">
            <summary>
            Represents the time squared quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.TimeSquared.SecondSquaredField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TimeSquared.SecondSquared"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TimeSquared.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.TimeSquared.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.TimeSquared"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.TimeSquared.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.TimeSquared"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.TimeSquared.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.TimeSquared"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.TimeSquared"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.TimeSquared@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.TimeSquared"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_Addition(QuantityTypes.TimeSquared,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_Division(QuantityTypes.TimeSquared,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_Division(QuantityTypes.TimeSquared,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_Equality(QuantityTypes.TimeSquared,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_GreaterThan(QuantityTypes.TimeSquared,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_GreaterThanOrEqual(QuantityTypes.TimeSquared,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_Inequality(QuantityTypes.TimeSquared,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_LessThan(QuantityTypes.TimeSquared,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_LessThanOrEqual(QuantityTypes.TimeSquared,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_Multiply(System.Double,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_Multiply(QuantityTypes.TimeSquared,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_Subtraction(QuantityTypes.TimeSquared,QuantityTypes.TimeSquared)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_UnaryPlus(QuantityTypes.TimeSquared)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.op_UnaryNegation(QuantityTypes.TimeSquared)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.CompareTo(QuantityTypes.TimeSquared)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.TimeSquared"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.TimeSquared"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.ConvertTo(QuantityTypes.TimeSquared)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.Equals(QuantityTypes.TimeSquared)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.TimeSquared"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.TimeSquared"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.TimeSquared.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TimeSquared.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.TimeSquared.SecondSquared">
            <summary>
            Gets the "s^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TimeSquared.XmlValue">
            <summary>
            Gets or sets the time squared as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.TimeSquared.Value">
            <summary>
            Gets the value of the time squared in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.VelocitySquared">
            <summary>
            Represents the velocity squared quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.VelocitySquared.MetreSquaredPerSecondSquaredField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.VelocitySquared.MetreSquaredPerSecondSquared"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.VelocitySquared.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.VelocitySquared"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.VelocitySquared"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.VelocitySquared"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.VelocitySquared"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.VelocitySquared@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.VelocitySquared"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_Addition(QuantityTypes.VelocitySquared,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_Division(QuantityTypes.VelocitySquared,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_Division(QuantityTypes.VelocitySquared,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_Equality(QuantityTypes.VelocitySquared,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_GreaterThan(QuantityTypes.VelocitySquared,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_GreaterThanOrEqual(QuantityTypes.VelocitySquared,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_Inequality(QuantityTypes.VelocitySquared,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_LessThan(QuantityTypes.VelocitySquared,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_LessThanOrEqual(QuantityTypes.VelocitySquared,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_Multiply(System.Double,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_Multiply(QuantityTypes.VelocitySquared,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_Subtraction(QuantityTypes.VelocitySquared,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_UnaryPlus(QuantityTypes.VelocitySquared)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.op_UnaryNegation(QuantityTypes.VelocitySquared)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.CompareTo(QuantityTypes.VelocitySquared)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.VelocitySquared"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.VelocitySquared"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.ConvertTo(QuantityTypes.VelocitySquared)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.Equals(QuantityTypes.VelocitySquared)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.VelocitySquared"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.VelocitySquared"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.VelocitySquared.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.VelocitySquared.MetreSquaredPerSecondSquared">
            <summary>
            Gets the "m^2/s^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.VelocitySquared.XmlValue">
            <summary>
            Gets or sets the velocity squared as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.VelocitySquared.Value">
            <summary>
            Gets the value of the velocity squared in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.IUnitProvider">
            <summary>
            Provides units for parsing and formatting.
            </summary>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.Format``1(System.String,System.IFormatProvider,``0)">
            <summary>
            Formats the quantity by the specified format string.
            </summary>
            <typeparam name="T">The quantity type.</typeparam>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="quantity">The quantity.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.GetUnit(System.String)">
            <summary>
            Gets the first registered unit (of any quantity type) that matches the specified symbol.
            </summary>
            <param name="symbol">
            The unit symbol. 
            </param>
            <returns>
            The unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.TryGetUnit(System.Type,System.String,QuantityTypes.IQuantity@)">
            <summary>
            Gets the unit that matches the specified symbol.
            </summary>
            <param name="type">The type.</param>
            <param name="symbol">The symbol of the unit.</param>
            <param name="unit">The unit.</param>
            <returns><c>true</c> if the unit symbol was found, <c>false</c> otherwise</returns>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.GetUnits(System.Type)">
            <summary>
            Gets the registered units of the specified type.
            </summary>
            <param name="type">
            The type. 
            </param>
            <returns>
            The registered units. 
            </returns>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.RegisterUnit(QuantityTypes.IQuantity,System.String)">
            <summary>
            Registers the unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <param name="symbol">
            The name. 
            </param>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.TrySetDisplayUnit(System.Type,System.String)">
            <summary>
            Sets the display unit.
            </summary>
            <param name="type">The type.</param>
            <param name="symbol">The unit name (must be registered).</param>
            <returns><c>true</c> if the unit was set, <c>false</c> otherwise</returns>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.GetDisplayUnit(System.Type,System.String@)">
            <summary>
            Gets the display unit for the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="symbol">The unit symbol.</param>
            <returns>The unit quantity.</returns>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.GetDisplayUnit(System.Type)">
            <summary>
            Gets the display unit for the specified type.
            </summary>
            <param name="type">The unit type.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.TryGetDisplayUnit(System.Type,QuantityTypes.IQuantity@,System.String@)">
            <summary>
            Gets the display unit for the specified type.
            </summary>
            <param name="type">The unit type.</param>
            <param name="unit">The unit (output).</param>
            <param name="unitSymbol">The unit symbol (output).</param>
            <returns>True if the display unit was found.</returns>
        </member>
        <member name="M:QuantityTypes.IUnitProvider.TryParse(System.Type,System.String,System.IFormatProvider,QuantityTypes.IQuantity@)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="unitType">Type of the unit.</param>
            <param name="input">The input.</param>
            <param name="provider">The numeric format provider.</param>
            <param name="quantity">The quantity.</param>
            <returns><c>true</c> if the parsing was successful, <c>false</c> otherwise</returns>
        </member>
        <member name="P:QuantityTypes.IUnitProvider.Culture">
            <summary>
            Gets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="T:QuantityTypes.UnitAttribute">
            <summary>
                Specifies the unit name (e.g. "m/s^2").
            </summary>
            <remarks>
                The unit name is used when formatting and parsing strings.
            </remarks>
        </member>
        <member name="M:QuantityTypes.UnitAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.UnitAttribute"/> class.
            </summary>
            <param name="symbol">
            The unit symbol. 
            </param>
            <param name="isDefaultDisplayUnit">
            if set to <c>true</c>, the unit is the default display unit. 
            </param>
        </member>
        <member name="P:QuantityTypes.UnitAttribute.IsDefaultDisplayUnit">
            <summary>
                Gets a value indicating whether this unit is the default display unit.
            </summary>
            <value> <c>true</c> if this instance is default display unit; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:QuantityTypes.UnitAttribute.Symbol">
            <summary>
                Gets the symbol of the unit.
            </summary>
            <value> The name. </value>
        </member>
        <member name="T:QuantityTypes.UnitProvider">
            <summary>
            Implements a unit provider.
            </summary>
        </member>
        <member name="F:QuantityTypes.UnitProvider.NotANumberString">
            <summary>
            The string representing NaN.
            </summary>
        </member>
        <member name="F:QuantityTypes.UnitProvider.displayUnits">
            <summary>
              The display units.
            </summary>
        </member>
        <member name="F:QuantityTypes.UnitProvider.units">
            <summary>
              The units.
            </summary>
        </member>
        <member name="M:QuantityTypes.UnitProvider.#cctor">
            <summary>
              Initializes static members of the <see cref="T:QuantityTypes.UnitProvider"/> class.
            </summary>
        </member>
        <member name="M:QuantityTypes.UnitProvider.#ctor(System.Reflection.Assembly,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.UnitProvider"/> class and initialize with the units found in the specified assembly.
            </summary>
            <param name="a">
            The assembly containing unit definitions. 
            </param>
            <param name="culture">
            The culture. 
            </param>
        </member>
        <member name="M:QuantityTypes.UnitProvider.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.UnitProvider"/> class.
            </summary>
            <param name="culture">
            The culture. 
            </param>
        </member>
        <member name="M:QuantityTypes.UnitProvider.Format``1(System.String,System.IFormatProvider,``0)">
            <summary>
            Formats the specified quantity.
            </summary>
            <typeparam name="T">The quantity type.</typeparam>
            <param name="format">The format.</param>
            <param name="provider">The numeric format provider.</param>
            <param name="quantity">The quantity.</param>
            <returns>The <see cref="T:System.String"/> .</returns>
        </member>
        <member name="M:QuantityTypes.UnitProvider.GetDisplayUnit(System.Type)">
            <summary>
            Gets the display unit for the specified type.
            </summary>
            <param name="type">
            The unit type. 
            </param>
            <returns>
            The name. 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProvider.GetDisplayUnit(System.Type,System.String@)">
            <summary>
            Gets the display unit for the specified type.
            </summary>
            <param name="type">
            The type. 
            </param>
            <param name="unitName">
            Name of the unit. 
            </param>
            <returns>
            A quantity. 
            </returns>
            <exception cref="T:System.InvalidOperationException">
            No display unit defined for  + type
            </exception>
        </member>
        <member name="M:QuantityTypes.UnitProvider.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">
            An object that specifies the type of format object to return. 
            </param>
            <returns>
            An instance of the object specified by <paramref name="formatType"/> , if the <see cref="T:System.IFormatProvider"/> implementation can supply that type of object; otherwise, null. 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProvider.GetUnit(System.String)">
            <summary>
            Gets the first registered unit (of any quantity type) that matches the specified name.
            </summary>
            <param name="name">
            The name. 
            </param>
            <returns>
            The unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProvider.GetUnits(System.Type)">
            <summary>
            Gets the registered units of the specified type.
            </summary>
            <param name="type">
            The type. 
            </param>
            <returns>
            The registered units. 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProvider.RegisterUnit(QuantityTypes.IQuantity,System.String)">
            <summary>
            Registers the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <param name="name">
            The name. 
            </param>
        </member>
        <member name="M:QuantityTypes.UnitProvider.TryGetDisplayUnit(System.Type,QuantityTypes.IQuantity@,System.String@)">
            <summary>
            Gets the display unit for the specified type.
            </summary>
            <param name="type">
            The unit type. 
            </param>
            <param name="unit">
            The unit (output). 
            </param>
            <param name="unitName">
            The unit symbol (output). 
            </param>
            <returns>
            True if the display unit was found. 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProvider.TryGetUnit(System.Type,System.String,QuantityTypes.IQuantity@)">
            <summary>
            Gets the unit that matches the specified name.
            </summary>
            <param name="type">
            The type. 
            </param>
            <param name="name">
            The name of the unit. 
            </param>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            <c>true</c> if the unit name was found, <c>false</c> otherwise 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProvider.TryParse(System.Type,System.String,System.IFormatProvider,QuantityTypes.IQuantity@)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="unitType">Type of the unit.</param>
            <param name="input">The input.</param>
            <param name="provider">The numeric format provider.</param>
            <param name="quantity">The quantity.</param>
            <returns><c>true</c> if the parsing was successful, <c>false</c> otherwise</returns>
        </member>
        <member name="M:QuantityTypes.UnitProvider.TrySetDisplayUnit(System.Type,System.String)">
            <summary>
            Sets the display unit.
            </summary>
            <param name="type">
            The type. 
            </param>
            <param name="name">
            The unit name (must be registered). 
            </param>
            <returns>
            <c>true</c> if the unit was set, <c>false</c> otherwise 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProvider.RegisterUnits(System.Reflection.Assembly)">
            <summary>
            Registers the units in the specified assembly.
            </summary>
            <param name="assembly">
            The assembly. 
            </param>
        </member>
        <member name="M:QuantityTypes.UnitProvider.RegisterUnits(System.Type)">
            <summary>
            Registers the unit properties in the specified type.
            </summary>
            <param name="type">
            The type. 
            </param>
        </member>
        <member name="M:QuantityTypes.UnitProvider.GetUnit``1(System.String)">
            <summary>
            Gets the unit of the specified name and type.
            </summary>
            <param name="name">
            The name. 
            </param>
            <typeparam name="T">
            The type of unit. 
            </typeparam>
            <returns>
            The unit. 
            </returns>
        </member>
        <member name="P:QuantityTypes.UnitProvider.Default">
            <summary>
              Gets or sets the default unit provider.
            </summary>
        </member>
        <member name="P:QuantityTypes.UnitProvider.Culture">
            <summary>
              Gets or sets the culture.
            </summary>
            <value> The culture. </value>
        </member>
        <member name="P:QuantityTypes.UnitProvider.Separator">
            <summary>
              Gets or sets the separator.
            </summary>
            <value> The separator. </value>
        </member>
        <member name="T:QuantityTypes.UnitProvider.UnitDefinition">
            <summary>
              The unit definition.
            </summary>
        </member>
        <member name="P:QuantityTypes.UnitProvider.UnitDefinition.Name">
            <summary>
              Gets or sets the name.
            </summary>
        </member>
        <member name="P:QuantityTypes.UnitProvider.UnitDefinition.Unit">
            <summary>
              Gets or sets the unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Acceleration">
            <summary>
                Provides operators related to acceleration.
            </summary>
            <summary>
            Represents the acceleration quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Multiply(QuantityTypes.Acceleration,QuantityTypes.Time)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Multiply(QuantityTypes.Acceleration,QuantityTypes.Length)">
            <summary>
            Implements the * operator for the product of <see cref="T:QuantityTypes.Acceleration"/> and <see cref="T:QuantityTypes.Length"/>.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Multiply(QuantityTypes.Acceleration,QuantityTypes.TimeSquared)">
            <summary>
            Implements the * operator for the product of <see cref="T:QuantityTypes.Acceleration"/> and <see cref="T:QuantityTypes.TimeSquared"/>.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="F:QuantityTypes.Acceleration.MetrePerSecondSquaredField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Acceleration.MetrePerSecondSquared"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Acceleration.StandardGravityField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Acceleration.StandardGravity"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Acceleration.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Acceleration.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Acceleration"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Acceleration.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Acceleration"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Acceleration.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Acceleration"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Acceleration"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Acceleration@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Acceleration"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Addition(QuantityTypes.Acceleration,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Division(QuantityTypes.Acceleration,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Division(QuantityTypes.Acceleration,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Equality(QuantityTypes.Acceleration,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_GreaterThan(QuantityTypes.Acceleration,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_GreaterThanOrEqual(QuantityTypes.Acceleration,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Inequality(QuantityTypes.Acceleration,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_LessThan(QuantityTypes.Acceleration,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_LessThanOrEqual(QuantityTypes.Acceleration,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Multiply(System.Double,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Multiply(QuantityTypes.Acceleration,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_Subtraction(QuantityTypes.Acceleration,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_UnaryPlus(QuantityTypes.Acceleration)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.op_UnaryNegation(QuantityTypes.Acceleration)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.CompareTo(QuantityTypes.Acceleration)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Acceleration"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Acceleration"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.ConvertTo(QuantityTypes.Acceleration)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.Equals(QuantityTypes.Acceleration)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Acceleration"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Acceleration"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Acceleration.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Acceleration.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Acceleration.MetrePerSecondSquared">
            <summary>
            Gets the "m/s^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Acceleration.StandardGravity">
            <summary>
            Gets the "g" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Acceleration.XmlValue">
            <summary>
            Gets or sets the acceleration as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Acceleration.Value">
            <summary>
            Gets the value of the acceleration in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Angle">
            <summary>
                Provides operators related to angle.
            </summary>
            <summary>
            Represents the angle quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Angle.Acos(System.Double)">
            <summary>
            Calculates the arc cosine of the specified value.
            </summary>
            <param name="d">
            The value. 
            </param>
            <returns>
            The angle. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.Asin(System.Double)">
            <summary>
            Calculates the arc sine of the specified value.
            </summary>
            <param name="d">
            The value. 
            </param>
            <returns>
            The angle. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.Atan(System.Double)">
            <summary>
            Calculates the arc tangent of the specified value.
            </summary>
            <param name="d">
            The value. 
            </param>
            <returns>
            The angle. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.Atan2(System.Double,System.Double)">
            <summary>
            Returns the angle whose tangent is the quotient of the two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane.</returns>
        </member>
        <member name="M:QuantityTypes.Angle.Atan2(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Returns the angle whose tangent is the quotient of the two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane.</returns>
        </member>
        <member name="M:QuantityTypes.Angle.Cos">
            <summary>
                Calculates the cosine of the specified angle.
            </summary>
            <returns> The value. </returns>
        </member>
        <member name="M:QuantityTypes.Angle.Sin">
            <summary>
                Calculates the sine of the specified angle.
            </summary>
            <returns> The value. </returns>
        </member>
        <member name="M:QuantityTypes.Angle.Tan">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <returns>The tangent of the angle.</returns>
        </member>
        <member name="M:QuantityTypes.Angle.ToDegrees">
            <summary>
            Converts the angle to degrees.
            </summary>
            <returns>The angle in degrees</returns>
        </member>
        <member name="M:QuantityTypes.Angle.ToRadians">
            <summary>
            Converts the angle to radians.
            </summary>
            <returns>The angle in radians.</returns>
        </member>
        <member name="F:QuantityTypes.Angle.RadianField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Angle.Radian"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Angle.DegreeField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Angle.Degree"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Angle.DegreeSymbolField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Angle.DegreeSymbol"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Angle.GradField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Angle.Grad"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Angle.GonField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Angle.Gon"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Angle.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Angle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Angle"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Angle.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Angle"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Angle.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Angle"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Angle"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Angle@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Angle.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Angle"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_Addition(QuantityTypes.Angle,QuantityTypes.Angle)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_Division(QuantityTypes.Angle,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_Division(QuantityTypes.Angle,QuantityTypes.Angle)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_Equality(QuantityTypes.Angle,QuantityTypes.Angle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_GreaterThan(QuantityTypes.Angle,QuantityTypes.Angle)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_GreaterThanOrEqual(QuantityTypes.Angle,QuantityTypes.Angle)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_Inequality(QuantityTypes.Angle,QuantityTypes.Angle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_LessThan(QuantityTypes.Angle,QuantityTypes.Angle)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_LessThanOrEqual(QuantityTypes.Angle,QuantityTypes.Angle)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_Multiply(System.Double,QuantityTypes.Angle)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_Multiply(QuantityTypes.Angle,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_Subtraction(QuantityTypes.Angle,QuantityTypes.Angle)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_UnaryPlus(QuantityTypes.Angle)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.op_UnaryNegation(QuantityTypes.Angle)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.CompareTo(QuantityTypes.Angle)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Angle"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Angle"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Angle.ConvertTo(QuantityTypes.Angle)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.Equals(QuantityTypes.Angle)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Angle"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Angle"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Angle.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Angle.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Angle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Angle.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Angle.Radian">
            <summary>
            Gets the "rad" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Angle.Degree">
            <summary>
            Gets the "deg" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Angle.DegreeSymbol">
            <summary>
            Gets the "°" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Angle.Grad">
            <summary>
            Gets the "grad" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Angle.Gon">
            <summary>
            Gets the "gon" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Angle.XmlValue">
            <summary>
            Gets or sets the angle as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Angle.Value">
            <summary>
            Gets the value of the angle in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Area">
            <summary>
                Provides operators related to area.
            </summary>
            <summary>
            Represents the area quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Area.Sqrt(QuantityTypes.Area)">
            <summary>
            Calculates the square root of the specified area.
            </summary>
            <param name="l">
            The area. 
            </param>
            <returns>
            The length. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Division(QuantityTypes.Area,QuantityTypes.Length)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="a1"> The area. </param>
            <param name="a2"> The area. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Multiply(QuantityTypes.Area,QuantityTypes.Length)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="a1"> The area. </param>
            <param name="a2"> The area. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Multiply(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="a1"> The area. </param>
            <param name="a2"> The area. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.Area.SquareMetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Area.SquareMetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Area.AcreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Area.Acre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Area.HectareField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Area.Hectare"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Area.SquareFootField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Area.SquareFoot"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Area.SquareKilometreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Area.SquareKilometre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Area.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Area.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Area"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Area.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Area"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Area.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Area"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Area"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Area@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Area.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Area"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Addition(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Division(QuantityTypes.Area,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Division(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Equality(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_GreaterThan(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_GreaterThanOrEqual(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Inequality(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_LessThan(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_LessThanOrEqual(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Multiply(System.Double,QuantityTypes.Area)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Multiply(QuantityTypes.Area,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_Subtraction(QuantityTypes.Area,QuantityTypes.Area)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_UnaryPlus(QuantityTypes.Area)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.op_UnaryNegation(QuantityTypes.Area)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.CompareTo(QuantityTypes.Area)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Area"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Area"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Area.ConvertTo(QuantityTypes.Area)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.Equals(QuantityTypes.Area)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Area"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Area"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Area.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Area.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Area.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Area.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Area.SquareMetre">
            <summary>
            Gets the "m^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Area.Acre">
            <summary>
            Gets the "ac" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Area.Hectare">
            <summary>
            Gets the "ha" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Area.SquareFoot">
            <summary>
            Gets the "ft^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Area.SquareKilometre">
            <summary>
            Gets the "km^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Area.XmlValue">
            <summary>
            Gets or sets the area as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Area.Value">
            <summary>
            Gets the value of the area in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Density">
            <summary>
                Provides operators related to volume.
            </summary>
            <summary>
            Represents the density quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Density.op_Multiply(QuantityTypes.Density,QuantityTypes.Volume)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The density. </param>
            <param name="y"> The volume. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.Density.KilogramPerCubicMetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Density.KilogramPerCubicMetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Density.KilogramPerCubicDecimetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Density.KilogramPerCubicDecimetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Density.GramPerCubicCentietreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Density.GramPerCubicCentietre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Density.KilogramPerLitreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Density.KilogramPerLitre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Density.GramPerMillilitreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Density.GramPerMillilitre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Density.PoundPerCubicFootField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Density.PoundPerCubicFoot"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Density.PoundPerCubicInchField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Density.PoundPerCubicInch"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Density.PoundPerGallonField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Density.PoundPerGallon"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Density.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Density.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Density"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Density.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Density"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Density.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Density"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Density"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Density@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Density.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Density"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_Addition(QuantityTypes.Density,QuantityTypes.Density)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_Division(QuantityTypes.Density,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_Division(QuantityTypes.Density,QuantityTypes.Density)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_Equality(QuantityTypes.Density,QuantityTypes.Density)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_GreaterThan(QuantityTypes.Density,QuantityTypes.Density)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_GreaterThanOrEqual(QuantityTypes.Density,QuantityTypes.Density)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_Inequality(QuantityTypes.Density,QuantityTypes.Density)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_LessThan(QuantityTypes.Density,QuantityTypes.Density)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_LessThanOrEqual(QuantityTypes.Density,QuantityTypes.Density)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_Multiply(System.Double,QuantityTypes.Density)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_Multiply(QuantityTypes.Density,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_Subtraction(QuantityTypes.Density,QuantityTypes.Density)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_UnaryPlus(QuantityTypes.Density)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.op_UnaryNegation(QuantityTypes.Density)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.CompareTo(QuantityTypes.Density)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Density"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Density"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Density.ConvertTo(QuantityTypes.Density)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.Equals(QuantityTypes.Density)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Density"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Density"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Density.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Density.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Density.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Density.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Density.KilogramPerCubicMetre">
            <summary>
            Gets the "kg/m^3" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Density.KilogramPerCubicDecimetre">
            <summary>
            Gets the "kg/dm^3" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Density.GramPerCubicCentietre">
            <summary>
            Gets the "g/cm^3" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Density.KilogramPerLitre">
            <summary>
            Gets the "kg/L" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Density.GramPerMillilitre">
            <summary>
            Gets the "g/mL" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Density.PoundPerCubicFoot">
            <summary>
            Gets the "lb/ft^3" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Density.PoundPerCubicInch">
            <summary>
            Gets the "lb/in^3" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Density.PoundPerGallon">
            <summary>
            Gets the "lb/gal" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Density.XmlValue">
            <summary>
            Gets or sets the density as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Density.Value">
            <summary>
            Gets the value of the density in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.ElectricCurrent">
            <summary>
                Provides operators related to electric current.
            </summary>
            <summary>
            Represents the electric current quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_Multiply(QuantityTypes.ElectricCurrent,QuantityTypes.Time)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.ElectricCurrent.AmpereField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.ElectricCurrent.Ampere"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricCurrent.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricCurrent"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricCurrent"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricCurrent"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricCurrent"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.ElectricCurrent@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.ElectricCurrent"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_Addition(QuantityTypes.ElectricCurrent,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_Division(QuantityTypes.ElectricCurrent,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_Division(QuantityTypes.ElectricCurrent,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_Equality(QuantityTypes.ElectricCurrent,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_GreaterThan(QuantityTypes.ElectricCurrent,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_GreaterThanOrEqual(QuantityTypes.ElectricCurrent,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_Inequality(QuantityTypes.ElectricCurrent,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_LessThan(QuantityTypes.ElectricCurrent,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_LessThanOrEqual(QuantityTypes.ElectricCurrent,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_Multiply(System.Double,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_Multiply(QuantityTypes.ElectricCurrent,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_Subtraction(QuantityTypes.ElectricCurrent,QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_UnaryPlus(QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.op_UnaryNegation(QuantityTypes.ElectricCurrent)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.CompareTo(QuantityTypes.ElectricCurrent)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.ElectricCurrent"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricCurrent"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.ConvertTo(QuantityTypes.ElectricCurrent)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.Equals(QuantityTypes.ElectricCurrent)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.ElectricCurrent"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricCurrent"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCurrent.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.ElectricCurrent.Ampere">
            <summary>
            Gets the "A" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.ElectricCurrent.XmlValue">
            <summary>
            Gets or sets the electric current as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.ElectricCurrent.Value">
            <summary>
            Gets the value of the electric current in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.ElectricResistance">
            <summary>
                Provides operators related to electric resistance.
            </summary>
            <summary>
            Represents the electric resistance quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_Multiply(QuantityTypes.ElectricResistance,QuantityTypes.ElectricCurrent)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.ElectricResistance.OhmField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.ElectricResistance.Ohm"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricResistance.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricResistance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricResistance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricResistance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricResistance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.ElectricResistance@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.ElectricResistance"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_Addition(QuantityTypes.ElectricResistance,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_Division(QuantityTypes.ElectricResistance,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_Division(QuantityTypes.ElectricResistance,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_Equality(QuantityTypes.ElectricResistance,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_GreaterThan(QuantityTypes.ElectricResistance,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_GreaterThanOrEqual(QuantityTypes.ElectricResistance,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_Inequality(QuantityTypes.ElectricResistance,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_LessThan(QuantityTypes.ElectricResistance,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_LessThanOrEqual(QuantityTypes.ElectricResistance,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_Multiply(System.Double,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_Multiply(QuantityTypes.ElectricResistance,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_Subtraction(QuantityTypes.ElectricResistance,QuantityTypes.ElectricResistance)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_UnaryPlus(QuantityTypes.ElectricResistance)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.op_UnaryNegation(QuantityTypes.ElectricResistance)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.CompareTo(QuantityTypes.ElectricResistance)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.ElectricResistance"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricResistance"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.ConvertTo(QuantityTypes.ElectricResistance)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.Equals(QuantityTypes.ElectricResistance)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.ElectricResistance"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricResistance"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricResistance.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.ElectricResistance.Ohm">
            <summary>
            Gets the "Ω" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.ElectricResistance.XmlValue">
            <summary>
            Gets or sets the electric resistance as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.ElectricResistance.Value">
            <summary>
            Gets the value of the electric resistance in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.ElectricVoltage">
            <summary>
                Provides operators related to electric voltage.
            </summary>
            <summary>
            Represents the electric voltage quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Division(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricCurrent)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Division(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricResistance)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.ElectricVoltage.VoltField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.ElectricVoltage.Volt"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricVoltage.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricVoltage"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricVoltage"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricVoltage"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricVoltage"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.ElectricVoltage@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.ElectricVoltage"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Addition(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Division(QuantityTypes.ElectricVoltage,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Division(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Equality(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_GreaterThan(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_GreaterThanOrEqual(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Inequality(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_LessThan(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_LessThanOrEqual(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Multiply(System.Double,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Multiply(QuantityTypes.ElectricVoltage,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_Subtraction(QuantityTypes.ElectricVoltage,QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_UnaryPlus(QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.op_UnaryNegation(QuantityTypes.ElectricVoltage)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.CompareTo(QuantityTypes.ElectricVoltage)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.ElectricVoltage"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricVoltage"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.ConvertTo(QuantityTypes.ElectricVoltage)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.Equals(QuantityTypes.ElectricVoltage)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.ElectricVoltage"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricVoltage"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricVoltage.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.ElectricVoltage.Volt">
            <summary>
            Gets the "V" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.ElectricVoltage.XmlValue">
            <summary>
            Gets or sets the electric voltage as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.ElectricVoltage.Value">
            <summary>
            Gets the value of the electric voltage in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Energy">
            <summary>
                Provides operators related to energy.
            </summary>
            <summary>
            Represents the energy quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Energy.op_Division(QuantityTypes.Energy,QuantityTypes.TemperatureDifference)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_Implicit(QuantityTypes.Torque)~QuantityTypes.Energy">
            <summary>
                Performs an implicit conversion from <see cref="T:QuantityTypes.Torque"/> to <see cref="T:QuantityTypes.Energy"/>.
            </summary>
            <param name="m"> The m. </param>
            <returns> The result of the conversion. </returns>
        </member>
        <member name="F:QuantityTypes.Energy.JouleField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Energy.Joule"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Energy.CalorieField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Energy.Calorie"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Energy.NewtonMetreRadianField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Energy.NewtonMetreRadian"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Energy.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Energy.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Energy"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Energy.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Energy"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Energy.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Energy"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Energy"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Energy@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Energy.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Energy"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_Addition(QuantityTypes.Energy,QuantityTypes.Energy)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_Division(QuantityTypes.Energy,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_Division(QuantityTypes.Energy,QuantityTypes.Energy)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_Equality(QuantityTypes.Energy,QuantityTypes.Energy)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_GreaterThan(QuantityTypes.Energy,QuantityTypes.Energy)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_GreaterThanOrEqual(QuantityTypes.Energy,QuantityTypes.Energy)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_Inequality(QuantityTypes.Energy,QuantityTypes.Energy)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_LessThan(QuantityTypes.Energy,QuantityTypes.Energy)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_LessThanOrEqual(QuantityTypes.Energy,QuantityTypes.Energy)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_Multiply(System.Double,QuantityTypes.Energy)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_Multiply(QuantityTypes.Energy,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_Subtraction(QuantityTypes.Energy,QuantityTypes.Energy)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_UnaryPlus(QuantityTypes.Energy)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.op_UnaryNegation(QuantityTypes.Energy)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.CompareTo(QuantityTypes.Energy)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Energy"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Energy"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Energy.ConvertTo(QuantityTypes.Energy)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.Equals(QuantityTypes.Energy)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Energy"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Energy"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Energy.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Energy.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Energy.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Energy.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Energy.Joule">
            <summary>
            Gets the "J" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Energy.Calorie">
            <summary>
            Gets the "cal" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Energy.NewtonMetreRadian">
            <summary>
            Gets the "N*m*rad" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Energy.XmlValue">
            <summary>
            Gets or sets the energy as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Energy.Value">
            <summary>
            Gets the value of the energy in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Force">
            <summary>
                Provides operators related to force.
            </summary>
            <summary>
            Represents the force quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Force.op_Division(QuantityTypes.Force,QuantityTypes.Area)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_Multiply(QuantityTypes.Force,QuantityTypes.Length)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="f"> The f. </param>
            <param name="l"> The l. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.Force.NewtonField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Force.Newton"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Force.KilogramForceField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Force.KilogramForce"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Force.KipForceField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Force.KipForce"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Force.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Force.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Force"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Force.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Force"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Force.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Force"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Force"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Force@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Force.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Force"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_Addition(QuantityTypes.Force,QuantityTypes.Force)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_Division(QuantityTypes.Force,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_Division(QuantityTypes.Force,QuantityTypes.Force)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_Equality(QuantityTypes.Force,QuantityTypes.Force)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_GreaterThan(QuantityTypes.Force,QuantityTypes.Force)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_GreaterThanOrEqual(QuantityTypes.Force,QuantityTypes.Force)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_Inequality(QuantityTypes.Force,QuantityTypes.Force)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_LessThan(QuantityTypes.Force,QuantityTypes.Force)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_LessThanOrEqual(QuantityTypes.Force,QuantityTypes.Force)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_Multiply(System.Double,QuantityTypes.Force)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_Multiply(QuantityTypes.Force,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_Subtraction(QuantityTypes.Force,QuantityTypes.Force)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_UnaryPlus(QuantityTypes.Force)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.op_UnaryNegation(QuantityTypes.Force)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.CompareTo(QuantityTypes.Force)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Force"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Force"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Force.ConvertTo(QuantityTypes.Force)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.Equals(QuantityTypes.Force)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Force"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Force"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Force.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Force.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Force.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Force.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Force.Newton">
            <summary>
            Gets the "N" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Force.KilogramForce">
            <summary>
            Gets the "kgf" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Force.KipForce">
            <summary>
            Gets the "kipf" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Force.XmlValue">
            <summary>
            Gets or sets the force as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Force.Value">
            <summary>
            Gets the value of the force in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.LinearMomentum">
            <summary>
                Provides operators related to linear momentum.
            </summary>
            <summary>
            Represents the linear momentum quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Division(QuantityTypes.LinearMomentum,QuantityTypes.Velocity)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Division(QuantityTypes.LinearMomentum,QuantityTypes.Mass)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Multiply(QuantityTypes.LinearMomentum,QuantityTypes.Velocity)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.LinearMomentum.KilogramMeterPerSecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.LinearMomentum.KilogramMeterPerSecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.LinearMomentum.NewtonSecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.LinearMomentum.NewtonSecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.LinearMomentum.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.LinearMomentum"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.LinearMomentum"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.LinearMomentum"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.LinearMomentum"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.LinearMomentum@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.LinearMomentum"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Addition(QuantityTypes.LinearMomentum,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Division(QuantityTypes.LinearMomentum,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Division(QuantityTypes.LinearMomentum,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Equality(QuantityTypes.LinearMomentum,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_GreaterThan(QuantityTypes.LinearMomentum,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_GreaterThanOrEqual(QuantityTypes.LinearMomentum,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Inequality(QuantityTypes.LinearMomentum,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_LessThan(QuantityTypes.LinearMomentum,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_LessThanOrEqual(QuantityTypes.LinearMomentum,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Multiply(System.Double,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Multiply(QuantityTypes.LinearMomentum,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_Subtraction(QuantityTypes.LinearMomentum,QuantityTypes.LinearMomentum)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_UnaryPlus(QuantityTypes.LinearMomentum)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.op_UnaryNegation(QuantityTypes.LinearMomentum)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.CompareTo(QuantityTypes.LinearMomentum)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.LinearMomentum"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.LinearMomentum"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.ConvertTo(QuantityTypes.LinearMomentum)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.Equals(QuantityTypes.LinearMomentum)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.LinearMomentum"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.LinearMomentum"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LinearMomentum.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.LinearMomentum.KilogramMeterPerSecond">
            <summary>
            Gets the "kg*m/s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.LinearMomentum.NewtonSecond">
            <summary>
            Gets the "N*s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.LinearMomentum.XmlValue">
            <summary>
            Gets or sets the linear momentum as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.LinearMomentum.Value">
            <summary>
            Gets the value of the linear momentum in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Mass">
            <summary>
            Provides operators related to mass.
            </summary>
            <summary>
            Represents the mass quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Mass.op_Division(QuantityTypes.Mass,QuantityTypes.Volume)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="m"> The mass. </param>
            <param name="v"> The volume. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Division(QuantityTypes.Mass,QuantityTypes.Density)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="m"> The mass. </param>
            <param name="d"> The density. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Multiply(QuantityTypes.Mass,QuantityTypes.Area)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="m">The mass.</param>
            <param name="a">The area.</param>
            <returns>The mass moment of inertia.</returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Multiply(QuantityTypes.Mass,QuantityTypes.Acceleration)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="m">The mass.</param>
            <param name="a">The acceleration.</param>
            <returns>The force.</returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Multiply(QuantityTypes.Mass,QuantityTypes.VelocitySquared)">
            <summary>
            Implements the operator * for the product of <see cref="T:QuantityTypes.Mass"/> and <see cref="T:QuantityTypes.VelocitySquared"/>.
            </summary>
            <param name="m">The mass.</param>
            <param name="v2">The velocity squared.</param>
            <returns>The energy.</returns>
        </member>
        <member name="F:QuantityTypes.Mass.KilogramField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Mass.Kilogram"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Mass.GramField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Mass.Gram"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Mass.TonneField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Mass.Tonne"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Mass.KipsField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Mass.Kips"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Mass.PoundField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Mass.Pound"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Mass.SlugField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Mass.Slug"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Mass.TonField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Mass.Ton"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Mass.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Mass.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Mass"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Mass.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Mass"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Mass.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Mass"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Mass"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Mass@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Mass.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Mass"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Addition(QuantityTypes.Mass,QuantityTypes.Mass)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Division(QuantityTypes.Mass,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Division(QuantityTypes.Mass,QuantityTypes.Mass)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Equality(QuantityTypes.Mass,QuantityTypes.Mass)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_GreaterThan(QuantityTypes.Mass,QuantityTypes.Mass)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_GreaterThanOrEqual(QuantityTypes.Mass,QuantityTypes.Mass)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Inequality(QuantityTypes.Mass,QuantityTypes.Mass)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_LessThan(QuantityTypes.Mass,QuantityTypes.Mass)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_LessThanOrEqual(QuantityTypes.Mass,QuantityTypes.Mass)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Multiply(System.Double,QuantityTypes.Mass)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Multiply(QuantityTypes.Mass,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_Subtraction(QuantityTypes.Mass,QuantityTypes.Mass)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_UnaryPlus(QuantityTypes.Mass)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.op_UnaryNegation(QuantityTypes.Mass)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.CompareTo(QuantityTypes.Mass)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Mass"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Mass"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Mass.ConvertTo(QuantityTypes.Mass)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.Equals(QuantityTypes.Mass)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Mass"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Mass"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Mass.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Mass.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Mass.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Mass.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Mass.Kilogram">
            <summary>
            Gets the "kg" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Mass.Gram">
            <summary>
            Gets the "g" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Mass.Tonne">
            <summary>
            Gets the "t" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Mass.Kips">
            <summary>
            Gets the "kips" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Mass.Pound">
            <summary>
            Gets the "lb" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Mass.Slug">
            <summary>
            Gets the "slug" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Mass.Ton">
            <summary>
            Gets the "ton" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Mass.XmlValue">
            <summary>
            Gets or sets the mass as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Mass.Value">
            <summary>
            Gets the value of the mass in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Pressure">
            <summary>
                Provides operators related to pressure.
            </summary>
            <summary>
            Represents the pressure quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Pressure.op_Multiply(QuantityTypes.Pressure,QuantityTypes.Area)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.Pressure.PascalField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Pressure.Pascal"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Pressure.KilopascalField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Pressure.Kilopascal"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Pressure.PoundPerSquareInchField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Pressure.PoundPerSquareInch"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Pressure.KilopoundPerSquareInchField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Pressure.KilopoundPerSquareInch"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Pressure.MillimetreOfMercuryField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Pressure.MillimetreOfMercury"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Pressure.BarField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Pressure.Bar"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Pressure.MegapascalField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Pressure.Megapascal"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Pressure.AtmosphereField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Pressure.Atmosphere"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Pressure.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Pressure.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Pressure"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Pressure.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Pressure"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Pressure.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Pressure"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Pressure"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Pressure@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Pressure.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Pressure"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_Addition(QuantityTypes.Pressure,QuantityTypes.Pressure)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_Division(QuantityTypes.Pressure,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_Division(QuantityTypes.Pressure,QuantityTypes.Pressure)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_Equality(QuantityTypes.Pressure,QuantityTypes.Pressure)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_GreaterThan(QuantityTypes.Pressure,QuantityTypes.Pressure)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_GreaterThanOrEqual(QuantityTypes.Pressure,QuantityTypes.Pressure)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_Inequality(QuantityTypes.Pressure,QuantityTypes.Pressure)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_LessThan(QuantityTypes.Pressure,QuantityTypes.Pressure)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_LessThanOrEqual(QuantityTypes.Pressure,QuantityTypes.Pressure)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_Multiply(System.Double,QuantityTypes.Pressure)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_Multiply(QuantityTypes.Pressure,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_Subtraction(QuantityTypes.Pressure,QuantityTypes.Pressure)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_UnaryPlus(QuantityTypes.Pressure)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.op_UnaryNegation(QuantityTypes.Pressure)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.CompareTo(QuantityTypes.Pressure)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Pressure"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Pressure"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Pressure.ConvertTo(QuantityTypes.Pressure)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.Equals(QuantityTypes.Pressure)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Pressure"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Pressure"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Pressure.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Pressure.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Pressure.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Pressure.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Pressure.Pascal">
            <summary>
            Gets the "Pa" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Pressure.Kilopascal">
            <summary>
            Gets the "kPa" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Pressure.PoundPerSquareInch">
            <summary>
            Gets the "psi" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Pressure.KilopoundPerSquareInch">
            <summary>
            Gets the "ksi" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Pressure.MillimetreOfMercury">
            <summary>
            Gets the "mmHg" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Pressure.Bar">
            <summary>
            Gets the "bar" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Pressure.Megapascal">
            <summary>
            Gets the "Megapascal" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Pressure.Atmosphere">
            <summary>
            Gets the "atm" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Pressure.XmlValue">
            <summary>
            Gets or sets the pressure as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Pressure.Value">
            <summary>
            Gets the value of the pressure in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Temperature">
            <summary>
                Provides operators related to temperature.
            </summary>
            <summary>
              Represents a thermodynamic temperature.
            </summary>
        </member>
        <member name="M:QuantityTypes.Temperature.op_Addition(QuantityTypes.Temperature,QuantityTypes.TemperatureDifference)">
            <summary>
                Implements the operator +.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Temperature.op_Subtraction(QuantityTypes.Temperature,QuantityTypes.Temperature)">
            <summary>
                Implements the operator -.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="F:QuantityTypes.Temperature.DegreeCelsiusField">
            <summary>
              The Celsius degree backing field.
            </summary>
        </member>
        <member name="F:QuantityTypes.Temperature.DegreeFahrenheitField">
            <summary>
              The Fahrenheit degree backing field.
            </summary>
        </member>
        <member name="F:QuantityTypes.Temperature.DegreeKelvinField">
            <summary>
              The Kelvin degree backing field.
            </summary>
        </member>
        <member name="F:QuantityTypes.Temperature.value">
            <summary>
              The value backing field.
            </summary>
        </member>
        <member name="M:QuantityTypes.Temperature.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Temperature"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Temperature.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="s">
            The string. 
            </param>
            <param name="provider">
            The unit provider. 
            </param>
            <returns>
            The temperature. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Temperature.op_Multiply(System.Double,QuantityTypes.Temperature)">
            <summary>
              Implements the operator *.
            </summary>
            <param name="x"> The x. </param>
            <param name="unit"> The unit. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Temperature.CompareTo(QuantityTypes.Temperature)">
            <summary>
            Compares the temperature to the specified temperature.
            </summary>
            <param name="other">
            The other temperature. 
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the comparands. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Temperature.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">
            An object to compare with this instance. 
            </param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/> . Zero This instance is equal to <paramref name="obj"/> . Greater than zero This instance is greater than <paramref name="obj"/> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Temperature.ConvertTo(QuantityTypes.Temperature)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Temperature.Equals(QuantityTypes.Temperature)">
            <summary>
            Determines whether two Object instances are equal.
            </summary>
            <param name="other">
            The other temperature. 
            </param>
            <returns>
            <c>true</c> if equal, <c>false</c> otherwise 
            </returns>
        </member>
        <member name="M:QuantityTypes.Temperature.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">
            The number. 
            </param>
            <returns>
            The new quantity. 
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Cannot multiply a temperature.
            </exception>
        </member>
        <member name="M:QuantityTypes.Temperature.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Temperature.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation. 
            </param>
            <param name="formatProvider">
            The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Temperature.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns> A <see cref="T:System.String"/> that represents this instance. </returns>
        </member>
        <member name="M:QuantityTypes.Temperature.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The amount of the specified unit. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Temperature.DegreeCelsius">
            <summary>
              Gets the DegreeCelsius unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Temperature.DegreeFahrenheit">
            <summary>
              Gets the DegreeFahrenheit unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Temperature.DegreeKelvin">
            <summary>
              Gets the DegreeKelvin unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Temperature.Value">
            <summary>
              Gets the numeric value of the temperature in the base unit.
            </summary>
            <value> The value. </value>
        </member>
        <member name="T:QuantityTypes.Time">
            <summary>
                Provides operators related to time.
            </summary>
            <summary>
            Represents the time quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Time.op_Division(System.Double,QuantityTypes.Time)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_Multiply(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the * operator for the product of <see cref="T:QuantityTypes.Time"/> and <see cref="T:QuantityTypes.Time"/>.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:QuantityTypes.Time.op_ExclusiveOr(QuantityTypes.Time,System.Int32)">
            <summary>
                Implements the operator ^.
            </summary>
            <param name="x"> The x. </param>
            <param name="exp"> The exponent. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Time.Inverse">
            <summary>
                Inverses this time.
            </summary>
            <returns> The frequency. </returns>
        </member>
        <member name="F:QuantityTypes.Time.SecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Time.Second"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Time.MinuteField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Time.Minute"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Time.HourField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Time.Hour"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Time.DayField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Time.Day"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Time.WeekField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Time.Week"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Time.MillisecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Time.Millisecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Time.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Time.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Time"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Time.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Time"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Time.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Time"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Time"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Time@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Time.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Time"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_Addition(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_Division(QuantityTypes.Time,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_Division(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_Equality(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_GreaterThan(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_GreaterThanOrEqual(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_Inequality(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_LessThan(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_LessThanOrEqual(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_Multiply(System.Double,QuantityTypes.Time)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_Multiply(QuantityTypes.Time,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_Subtraction(QuantityTypes.Time,QuantityTypes.Time)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_UnaryPlus(QuantityTypes.Time)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.op_UnaryNegation(QuantityTypes.Time)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.CompareTo(QuantityTypes.Time)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Time"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Time"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Time.ConvertTo(QuantityTypes.Time)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.Equals(QuantityTypes.Time)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Time"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Time"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Time.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Time.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Time.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Time.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Time.Second">
            <summary>
            Gets the "s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Time.Minute">
            <summary>
            Gets the "min" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Time.Hour">
            <summary>
            Gets the "h" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Time.Day">
            <summary>
            Gets the "d" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Time.Week">
            <summary>
            Gets the "wk" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Time.Millisecond">
            <summary>
            Gets the "ms" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Time.XmlValue">
            <summary>
            Gets or sets the time as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Time.Value">
            <summary>
            Gets the value of the time in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Torque">
            <summary>
            Provides operators related to torque.
            </summary>
            <summary>
            Represents the torque quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Torque.op_Implicit(QuantityTypes.Energy)~QuantityTypes.Torque">
            <summary>
                Performs an implicit conversion from <see cref="T:QuantityTypes.Energy"/> to <see cref="T:QuantityTypes.Torque"/>.
            </summary>
            <param name="m"> The m. </param>
            <returns> The result of the conversion. </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Multiply(QuantityTypes.Torque,QuantityTypes.Angle)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The torque. </param>
            <param name="y"> The angle. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Division(QuantityTypes.Torque,QuantityTypes.Length)">
            <summary>
            Implements torque divided by length.
            </summary>
            <param name="x">The torque.</param>
            <param name="y">The length.</param>
            <returns>The resulting force.</returns>
        </member>
        <member name="F:QuantityTypes.Torque.NewtonMetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Torque.NewtonMetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Torque.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Torque.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Torque"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Torque.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Torque"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Torque.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Torque"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Torque"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Torque@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Torque.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Torque"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Addition(QuantityTypes.Torque,QuantityTypes.Torque)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Division(QuantityTypes.Torque,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Division(QuantityTypes.Torque,QuantityTypes.Torque)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Equality(QuantityTypes.Torque,QuantityTypes.Torque)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_GreaterThan(QuantityTypes.Torque,QuantityTypes.Torque)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_GreaterThanOrEqual(QuantityTypes.Torque,QuantityTypes.Torque)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Inequality(QuantityTypes.Torque,QuantityTypes.Torque)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_LessThan(QuantityTypes.Torque,QuantityTypes.Torque)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_LessThanOrEqual(QuantityTypes.Torque,QuantityTypes.Torque)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Multiply(System.Double,QuantityTypes.Torque)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Multiply(QuantityTypes.Torque,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_Subtraction(QuantityTypes.Torque,QuantityTypes.Torque)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_UnaryPlus(QuantityTypes.Torque)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.op_UnaryNegation(QuantityTypes.Torque)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.CompareTo(QuantityTypes.Torque)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Torque"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Torque"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Torque.ConvertTo(QuantityTypes.Torque)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.Equals(QuantityTypes.Torque)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Torque"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Torque"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Torque.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Torque.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Torque.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Torque.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Torque.NewtonMetre">
            <summary>
            Gets the "N*m" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Torque.XmlValue">
            <summary>
            Gets or sets the torque as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Torque.Value">
            <summary>
            Gets the value of the torque in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Velocity">
            <summary>
                Provides operators related to velocity.
            </summary>
            <summary>
            Represents the velocity quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Division(QuantityTypes.Velocity,QuantityTypes.Time)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The velocity. </param>
            <param name="y"> The time. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Division(QuantityTypes.Velocity,QuantityTypes.Acceleration)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The velocity. </param>
            <param name="y"> The acceleration. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Multiply(QuantityTypes.Velocity,QuantityTypes.Time)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The velocity. </param>
            <param name="y"> The time. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_ExclusiveOr(QuantityTypes.Velocity,System.Int32)">
            <summary>
                Implements the operator ^.
            </summary>
            <param name="x"> The x. </param>
            <param name="exp"> The exponent. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Multiply(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator * for the product of <see cref="T:QuantityTypes.Velocity"/> and <see cref="T:QuantityTypes.Velocity"/>.
            </summary>
            <param name="x">The first velocity.</param>
            <param name="y">The second velocity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="F:QuantityTypes.Velocity.MetrePerSecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Velocity.MetrePerSecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Velocity.KilometrePerHourField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Velocity.KilometrePerHour"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Velocity.KnotField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Velocity.Knot"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Velocity.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Velocity.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Velocity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Velocity.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Velocity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Velocity.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Velocity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Velocity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Velocity@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Velocity.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Velocity"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Addition(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Division(QuantityTypes.Velocity,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Division(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Equality(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_GreaterThan(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_GreaterThanOrEqual(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Inequality(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_LessThan(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_LessThanOrEqual(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Multiply(System.Double,QuantityTypes.Velocity)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Multiply(QuantityTypes.Velocity,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_Subtraction(QuantityTypes.Velocity,QuantityTypes.Velocity)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_UnaryPlus(QuantityTypes.Velocity)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.op_UnaryNegation(QuantityTypes.Velocity)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.CompareTo(QuantityTypes.Velocity)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Velocity"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Velocity"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Velocity.ConvertTo(QuantityTypes.Velocity)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.Equals(QuantityTypes.Velocity)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Velocity"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Velocity"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Velocity.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Velocity.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Velocity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Velocity.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Velocity.MetrePerSecond">
            <summary>
            Gets the "m/s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Velocity.KilometrePerHour">
            <summary>
            Gets the "km/h" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Velocity.Knot">
            <summary>
            Gets the "knot" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Velocity.XmlValue">
            <summary>
            Gets or sets the velocity as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Velocity.Value">
            <summary>
            Gets the value of the velocity in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Volume">
            <summary>
                Provides operators related to volume.
            </summary>
            <summary>
            Represents the volume quantity.
            </summary>
        </member>
        <member name="M:QuantityTypes.Volume.op_Division(QuantityTypes.Volume,QuantityTypes.Area)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="l1"> The l1. </param>
            <param name="l2"> The l2. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Multiply(QuantityTypes.Volume,QuantityTypes.Density)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The volume. </param>
            <param name="y"> The density. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Multiply(QuantityTypes.Volume,QuantityTypes.Length)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">The volume.</param>
            <param name="y">The length.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="F:QuantityTypes.Volume.CubicMetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Volume.CubicMetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Volume.LitreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Volume.Litre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Volume.GallonField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Volume.Gallon"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Volume.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Volume.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Volume"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Volume.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Volume"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Volume.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Volume"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Volume"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Volume@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Volume.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Volume"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Addition(QuantityTypes.Volume,QuantityTypes.Volume)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Division(QuantityTypes.Volume,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Division(QuantityTypes.Volume,QuantityTypes.Volume)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Equality(QuantityTypes.Volume,QuantityTypes.Volume)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_GreaterThan(QuantityTypes.Volume,QuantityTypes.Volume)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_GreaterThanOrEqual(QuantityTypes.Volume,QuantityTypes.Volume)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Inequality(QuantityTypes.Volume,QuantityTypes.Volume)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_LessThan(QuantityTypes.Volume,QuantityTypes.Volume)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_LessThanOrEqual(QuantityTypes.Volume,QuantityTypes.Volume)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Multiply(System.Double,QuantityTypes.Volume)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Multiply(QuantityTypes.Volume,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_Subtraction(QuantityTypes.Volume,QuantityTypes.Volume)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_UnaryPlus(QuantityTypes.Volume)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.op_UnaryNegation(QuantityTypes.Volume)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.CompareTo(QuantityTypes.Volume)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Volume"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Volume"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Volume.ConvertTo(QuantityTypes.Volume)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.Equals(QuantityTypes.Volume)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Volume"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Volume"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Volume.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Volume.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Volume.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Volume.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Volume.CubicMetre">
            <summary>
            Gets the "m^3" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Volume.Litre">
            <summary>
            Gets the "L" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Volume.Gallon">
            <summary>
            Gets the "gal" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Volume.XmlValue">
            <summary>
            Gets or sets the volume as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Volume.Value">
            <summary>
            Gets the value of the volume in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Action">
            <summary>
            Represents the action quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Action.AtomicUnitOfActionField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Action.AtomicUnitOfAction"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Action.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Action.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Action"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Action.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Action"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Action.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Action"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Action"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Action@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Action.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Action"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_Addition(QuantityTypes.Action,QuantityTypes.Action)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_Division(QuantityTypes.Action,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_Division(QuantityTypes.Action,QuantityTypes.Action)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_Equality(QuantityTypes.Action,QuantityTypes.Action)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_GreaterThan(QuantityTypes.Action,QuantityTypes.Action)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_GreaterThanOrEqual(QuantityTypes.Action,QuantityTypes.Action)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_Inequality(QuantityTypes.Action,QuantityTypes.Action)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_LessThan(QuantityTypes.Action,QuantityTypes.Action)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_LessThanOrEqual(QuantityTypes.Action,QuantityTypes.Action)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_Multiply(System.Double,QuantityTypes.Action)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_Multiply(QuantityTypes.Action,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_Subtraction(QuantityTypes.Action,QuantityTypes.Action)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_UnaryPlus(QuantityTypes.Action)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.op_UnaryNegation(QuantityTypes.Action)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.CompareTo(QuantityTypes.Action)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Action"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Action"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Action.ConvertTo(QuantityTypes.Action)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.Equals(QuantityTypes.Action)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Action"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Action"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Action.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Action.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Action.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Action.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Action.AtomicUnitOfAction">
            <summary>
            Gets the "au" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Action.XmlValue">
            <summary>
            Gets or sets the action as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Action.Value">
            <summary>
            Gets the value of the action in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.AmountOfSubstance">
            <summary>
            Represents the amount of substance quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.AmountOfSubstance.MoleField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.AmountOfSubstance.Mole"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.AmountOfSubstance.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.AmountOfSubstance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.AmountOfSubstance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.AmountOfSubstance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.AmountOfSubstance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.AmountOfSubstance@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.AmountOfSubstance"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_Addition(QuantityTypes.AmountOfSubstance,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_Division(QuantityTypes.AmountOfSubstance,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_Division(QuantityTypes.AmountOfSubstance,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_Equality(QuantityTypes.AmountOfSubstance,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_GreaterThan(QuantityTypes.AmountOfSubstance,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_GreaterThanOrEqual(QuantityTypes.AmountOfSubstance,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_Inequality(QuantityTypes.AmountOfSubstance,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_LessThan(QuantityTypes.AmountOfSubstance,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_LessThanOrEqual(QuantityTypes.AmountOfSubstance,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_Multiply(System.Double,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_Multiply(QuantityTypes.AmountOfSubstance,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_Subtraction(QuantityTypes.AmountOfSubstance,QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_UnaryPlus(QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.op_UnaryNegation(QuantityTypes.AmountOfSubstance)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.CompareTo(QuantityTypes.AmountOfSubstance)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.AmountOfSubstance"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.AmountOfSubstance"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.ConvertTo(QuantityTypes.AmountOfSubstance)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.Equals(QuantityTypes.AmountOfSubstance)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.AmountOfSubstance"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.AmountOfSubstance"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AmountOfSubstance.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.AmountOfSubstance.Mole">
            <summary>
            Gets the "mol" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.AmountOfSubstance.XmlValue">
            <summary>
            Gets or sets the amount of substance as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.AmountOfSubstance.Value">
            <summary>
            Gets the value of the amount of substance in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.AngularFrequency">
            <summary>
            Represents the angular frequency quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.AngularFrequency.RadiansPerSecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.AngularFrequency.RadiansPerSecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.AngularFrequency.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.AngularFrequency"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.AngularFrequency"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.AngularFrequency"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.AngularFrequency"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.AngularFrequency@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.AngularFrequency"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_Addition(QuantityTypes.AngularFrequency,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_Division(QuantityTypes.AngularFrequency,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_Division(QuantityTypes.AngularFrequency,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_Equality(QuantityTypes.AngularFrequency,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_GreaterThan(QuantityTypes.AngularFrequency,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_GreaterThanOrEqual(QuantityTypes.AngularFrequency,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_Inequality(QuantityTypes.AngularFrequency,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_LessThan(QuantityTypes.AngularFrequency,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_LessThanOrEqual(QuantityTypes.AngularFrequency,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_Multiply(System.Double,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_Multiply(QuantityTypes.AngularFrequency,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_Subtraction(QuantityTypes.AngularFrequency,QuantityTypes.AngularFrequency)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_UnaryPlus(QuantityTypes.AngularFrequency)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.op_UnaryNegation(QuantityTypes.AngularFrequency)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.CompareTo(QuantityTypes.AngularFrequency)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.AngularFrequency"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.AngularFrequency"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.ConvertTo(QuantityTypes.AngularFrequency)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.Equals(QuantityTypes.AngularFrequency)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.AngularFrequency"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.AngularFrequency"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.AngularFrequency.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.AngularFrequency.RadiansPerSecond">
            <summary>
            Gets the "rad/s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.AngularFrequency.XmlValue">
            <summary>
            Gets or sets the angular frequency as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.AngularFrequency.Value">
            <summary>
            Gets the value of the angular frequency in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Capacitance">
            <summary>
            Represents the capacitance quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Capacitance.FaradField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Capacitance.Farad"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Capacitance.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Capacitance.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Capacitance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Capacitance.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Capacitance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Capacitance.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Capacitance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Capacitance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Capacitance@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Capacitance"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_Addition(QuantityTypes.Capacitance,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_Division(QuantityTypes.Capacitance,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_Division(QuantityTypes.Capacitance,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_Equality(QuantityTypes.Capacitance,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_GreaterThan(QuantityTypes.Capacitance,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_GreaterThanOrEqual(QuantityTypes.Capacitance,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_Inequality(QuantityTypes.Capacitance,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_LessThan(QuantityTypes.Capacitance,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_LessThanOrEqual(QuantityTypes.Capacitance,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_Multiply(System.Double,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_Multiply(QuantityTypes.Capacitance,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_Subtraction(QuantityTypes.Capacitance,QuantityTypes.Capacitance)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_UnaryPlus(QuantityTypes.Capacitance)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.op_UnaryNegation(QuantityTypes.Capacitance)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.CompareTo(QuantityTypes.Capacitance)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Capacitance"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Capacitance"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.ConvertTo(QuantityTypes.Capacitance)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.Equals(QuantityTypes.Capacitance)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Capacitance"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Capacitance"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Capacitance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Capacitance.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Capacitance.Farad">
            <summary>
            Gets the "F" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Capacitance.XmlValue">
            <summary>
            Gets or sets the capacitance as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Capacitance.Value">
            <summary>
            Gets the value of the capacitance in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Curvature">
            <summary>
            Represents the curvature quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Curvature.PerMetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Curvature.PerMetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Curvature.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Curvature.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Curvature"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Curvature.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Curvature"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Curvature.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Curvature"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Curvature"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Curvature@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Curvature.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Curvature"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_Addition(QuantityTypes.Curvature,QuantityTypes.Curvature)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_Division(QuantityTypes.Curvature,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_Division(QuantityTypes.Curvature,QuantityTypes.Curvature)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_Equality(QuantityTypes.Curvature,QuantityTypes.Curvature)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_GreaterThan(QuantityTypes.Curvature,QuantityTypes.Curvature)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_GreaterThanOrEqual(QuantityTypes.Curvature,QuantityTypes.Curvature)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_Inequality(QuantityTypes.Curvature,QuantityTypes.Curvature)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_LessThan(QuantityTypes.Curvature,QuantityTypes.Curvature)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_LessThanOrEqual(QuantityTypes.Curvature,QuantityTypes.Curvature)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_Multiply(System.Double,QuantityTypes.Curvature)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_Multiply(QuantityTypes.Curvature,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_Subtraction(QuantityTypes.Curvature,QuantityTypes.Curvature)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_UnaryPlus(QuantityTypes.Curvature)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.op_UnaryNegation(QuantityTypes.Curvature)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.CompareTo(QuantityTypes.Curvature)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Curvature"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Curvature"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Curvature.ConvertTo(QuantityTypes.Curvature)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.Equals(QuantityTypes.Curvature)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Curvature"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Curvature"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Curvature.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Curvature.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Curvature.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Curvature.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Curvature.PerMetre">
            <summary>
            Gets the "1/m" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Curvature.XmlValue">
            <summary>
            Gets or sets the curvature as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Curvature.Value">
            <summary>
            Gets the value of the curvature in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.DynamicViscosity">
            <summary>
            Represents the dynamic viscosity quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.DynamicViscosity.PascalSecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.DynamicViscosity.PascalSecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.DynamicViscosity.NewtonSecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.DynamicViscosity.NewtonSecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.DynamicViscosity.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.DynamicViscosity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.DynamicViscosity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.DynamicViscosity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.DynamicViscosity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.DynamicViscosity@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.DynamicViscosity"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_Addition(QuantityTypes.DynamicViscosity,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_Division(QuantityTypes.DynamicViscosity,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_Division(QuantityTypes.DynamicViscosity,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_Equality(QuantityTypes.DynamicViscosity,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_GreaterThan(QuantityTypes.DynamicViscosity,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_GreaterThanOrEqual(QuantityTypes.DynamicViscosity,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_Inequality(QuantityTypes.DynamicViscosity,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_LessThan(QuantityTypes.DynamicViscosity,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_LessThanOrEqual(QuantityTypes.DynamicViscosity,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_Multiply(System.Double,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_Multiply(QuantityTypes.DynamicViscosity,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_Subtraction(QuantityTypes.DynamicViscosity,QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_UnaryPlus(QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.op_UnaryNegation(QuantityTypes.DynamicViscosity)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.CompareTo(QuantityTypes.DynamicViscosity)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.DynamicViscosity"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.DynamicViscosity"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.ConvertTo(QuantityTypes.DynamicViscosity)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.Equals(QuantityTypes.DynamicViscosity)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.DynamicViscosity"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.DynamicViscosity"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.DynamicViscosity.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.DynamicViscosity.PascalSecond">
            <summary>
            Gets the "Pa*s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.DynamicViscosity.NewtonSecond">
            <summary>
            Gets the "N*s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.DynamicViscosity.XmlValue">
            <summary>
            Gets or sets the dynamic viscosity as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.DynamicViscosity.Value">
            <summary>
            Gets the value of the dynamic viscosity in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.ElectricCharge">
            <summary>
            Represents the electric charge quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricCharge.CoulombField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.ElectricCharge.Coulomb"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricCharge.FaradayField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.ElectricCharge.Faraday"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricCharge.AtomicUnitOfChargeField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.ElectricCharge.AtomicUnitOfCharge"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricCharge.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricCharge"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricCharge"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricCharge"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricCharge"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.ElectricCharge@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.ElectricCharge"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_Addition(QuantityTypes.ElectricCharge,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_Division(QuantityTypes.ElectricCharge,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_Division(QuantityTypes.ElectricCharge,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_Equality(QuantityTypes.ElectricCharge,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_GreaterThan(QuantityTypes.ElectricCharge,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_GreaterThanOrEqual(QuantityTypes.ElectricCharge,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_Inequality(QuantityTypes.ElectricCharge,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_LessThan(QuantityTypes.ElectricCharge,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_LessThanOrEqual(QuantityTypes.ElectricCharge,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_Multiply(System.Double,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_Multiply(QuantityTypes.ElectricCharge,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_Subtraction(QuantityTypes.ElectricCharge,QuantityTypes.ElectricCharge)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_UnaryPlus(QuantityTypes.ElectricCharge)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.op_UnaryNegation(QuantityTypes.ElectricCharge)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.CompareTo(QuantityTypes.ElectricCharge)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.ElectricCharge"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricCharge"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.ConvertTo(QuantityTypes.ElectricCharge)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.Equals(QuantityTypes.ElectricCharge)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.ElectricCharge"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricCharge"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricCharge.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.ElectricCharge.Coulomb">
            <summary>
            Gets the "C" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.ElectricCharge.Faraday">
            <summary>
            Gets the "F" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.ElectricCharge.AtomicUnitOfCharge">
            <summary>
            Gets the "au" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.ElectricCharge.XmlValue">
            <summary>
            Gets or sets the electric charge as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.ElectricCharge.Value">
            <summary>
            Gets the value of the electric charge in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.ElectricDipole">
            <summary>
            Represents the electric dipole quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricDipole.CoulombMetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.ElectricDipole.CoulombMetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricDipole.DebyeField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.ElectricDipole.Debye"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.ElectricDipole.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricDipole"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.ElectricDipole"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricDipole"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.ElectricDipole"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.ElectricDipole@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.ElectricDipole"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_Addition(QuantityTypes.ElectricDipole,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_Division(QuantityTypes.ElectricDipole,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_Division(QuantityTypes.ElectricDipole,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_Equality(QuantityTypes.ElectricDipole,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_GreaterThan(QuantityTypes.ElectricDipole,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_GreaterThanOrEqual(QuantityTypes.ElectricDipole,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_Inequality(QuantityTypes.ElectricDipole,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_LessThan(QuantityTypes.ElectricDipole,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_LessThanOrEqual(QuantityTypes.ElectricDipole,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_Multiply(System.Double,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_Multiply(QuantityTypes.ElectricDipole,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_Subtraction(QuantityTypes.ElectricDipole,QuantityTypes.ElectricDipole)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_UnaryPlus(QuantityTypes.ElectricDipole)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.op_UnaryNegation(QuantityTypes.ElectricDipole)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.CompareTo(QuantityTypes.ElectricDipole)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.ElectricDipole"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricDipole"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.ConvertTo(QuantityTypes.ElectricDipole)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.Equals(QuantityTypes.ElectricDipole)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.ElectricDipole"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.ElectricDipole"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.ElectricDipole.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.ElectricDipole.CoulombMetre">
            <summary>
            Gets the "C*m" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.ElectricDipole.Debye">
            <summary>
            Gets the "D" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.ElectricDipole.XmlValue">
            <summary>
            Gets or sets the electric dipole as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.ElectricDipole.Value">
            <summary>
            Gets the value of the electric dipole in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.FirstMomentOfArea">
            <summary>
            Represents the first moment of area quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.FirstMomentOfArea.MetreCubedField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.FirstMomentOfArea.MetreCubed"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.FirstMomentOfArea.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.FirstMomentOfArea"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.FirstMomentOfArea"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.FirstMomentOfArea"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.FirstMomentOfArea"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.FirstMomentOfArea@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.FirstMomentOfArea"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_Addition(QuantityTypes.FirstMomentOfArea,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_Division(QuantityTypes.FirstMomentOfArea,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_Division(QuantityTypes.FirstMomentOfArea,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_Equality(QuantityTypes.FirstMomentOfArea,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_GreaterThan(QuantityTypes.FirstMomentOfArea,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_GreaterThanOrEqual(QuantityTypes.FirstMomentOfArea,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_Inequality(QuantityTypes.FirstMomentOfArea,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_LessThan(QuantityTypes.FirstMomentOfArea,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_LessThanOrEqual(QuantityTypes.FirstMomentOfArea,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_Multiply(System.Double,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_Multiply(QuantityTypes.FirstMomentOfArea,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_Subtraction(QuantityTypes.FirstMomentOfArea,QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_UnaryPlus(QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.op_UnaryNegation(QuantityTypes.FirstMomentOfArea)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.CompareTo(QuantityTypes.FirstMomentOfArea)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.FirstMomentOfArea"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.FirstMomentOfArea"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.ConvertTo(QuantityTypes.FirstMomentOfArea)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.Equals(QuantityTypes.FirstMomentOfArea)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.FirstMomentOfArea"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.FirstMomentOfArea"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FirstMomentOfArea.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.FirstMomentOfArea.MetreCubed">
            <summary>
            Gets the "m^3" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.FirstMomentOfArea.XmlValue">
            <summary>
            Gets or sets the first moment of area as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.FirstMomentOfArea.Value">
            <summary>
            Gets the value of the first moment of area in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Flow">
            <summary>
            Represents the flow quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Flow.CubicMetrePerSecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Flow.CubicMetrePerSecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Flow.LitrePerMinuteField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Flow.LitrePerMinute"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Flow.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Flow.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Flow"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Flow.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Flow"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Flow.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Flow"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Flow"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Flow@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Flow.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Flow"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_Addition(QuantityTypes.Flow,QuantityTypes.Flow)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_Division(QuantityTypes.Flow,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_Division(QuantityTypes.Flow,QuantityTypes.Flow)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_Equality(QuantityTypes.Flow,QuantityTypes.Flow)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_GreaterThan(QuantityTypes.Flow,QuantityTypes.Flow)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_GreaterThanOrEqual(QuantityTypes.Flow,QuantityTypes.Flow)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_Inequality(QuantityTypes.Flow,QuantityTypes.Flow)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_LessThan(QuantityTypes.Flow,QuantityTypes.Flow)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_LessThanOrEqual(QuantityTypes.Flow,QuantityTypes.Flow)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_Multiply(System.Double,QuantityTypes.Flow)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_Multiply(QuantityTypes.Flow,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_Subtraction(QuantityTypes.Flow,QuantityTypes.Flow)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_UnaryPlus(QuantityTypes.Flow)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.op_UnaryNegation(QuantityTypes.Flow)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.CompareTo(QuantityTypes.Flow)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Flow"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Flow"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Flow.ConvertTo(QuantityTypes.Flow)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.Equals(QuantityTypes.Flow)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Flow"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Flow"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Flow.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Flow.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Flow.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Flow.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Flow.CubicMetrePerSecond">
            <summary>
            Gets the "m^3/s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Flow.LitrePerMinute">
            <summary>
            Gets the "L/min" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Flow.XmlValue">
            <summary>
            Gets or sets the flow as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Flow.Value">
            <summary>
            Gets the value of the flow in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Fraction">
            <summary>
            Represents the fraction quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Fraction.FracField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Fraction.Frac"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Fraction.PercentField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Fraction.Percent"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Fraction.PermilField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Fraction.Permil"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Fraction.PartPerMillionField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Fraction.PartPerMillion"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Fraction.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Fraction.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Fraction"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Fraction.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Fraction"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Fraction.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Fraction"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Fraction"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Fraction@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Fraction.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Fraction"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_Addition(QuantityTypes.Fraction,QuantityTypes.Fraction)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_Division(QuantityTypes.Fraction,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_Division(QuantityTypes.Fraction,QuantityTypes.Fraction)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_Equality(QuantityTypes.Fraction,QuantityTypes.Fraction)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_GreaterThan(QuantityTypes.Fraction,QuantityTypes.Fraction)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_GreaterThanOrEqual(QuantityTypes.Fraction,QuantityTypes.Fraction)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_Inequality(QuantityTypes.Fraction,QuantityTypes.Fraction)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_LessThan(QuantityTypes.Fraction,QuantityTypes.Fraction)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_LessThanOrEqual(QuantityTypes.Fraction,QuantityTypes.Fraction)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_Multiply(System.Double,QuantityTypes.Fraction)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_Multiply(QuantityTypes.Fraction,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_Subtraction(QuantityTypes.Fraction,QuantityTypes.Fraction)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_UnaryPlus(QuantityTypes.Fraction)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.op_UnaryNegation(QuantityTypes.Fraction)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.CompareTo(QuantityTypes.Fraction)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Fraction"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Fraction"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Fraction.ConvertTo(QuantityTypes.Fraction)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.Equals(QuantityTypes.Fraction)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Fraction"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Fraction"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Fraction.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Fraction.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Fraction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Fraction.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Fraction.Frac">
            <summary>
            Gets the "" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Fraction.Percent">
            <summary>
            Gets the "%" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Fraction.Permil">
            <summary>
            Gets the "‰" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Fraction.PartPerMillion">
            <summary>
            Gets the "ppm" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Fraction.XmlValue">
            <summary>
            Gets or sets the fraction as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Fraction.Value">
            <summary>
            Gets the value of the fraction in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Frequency">
            <summary>
            Represents the frequency quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Frequency.HertzField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Frequency.Hertz"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Frequency.RevolutionsPerMinuteField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Frequency.RevolutionsPerMinute"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Frequency.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Frequency.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Frequency"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Frequency.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Frequency"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Frequency.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Frequency"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Frequency"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Frequency@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Frequency.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Frequency"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_Addition(QuantityTypes.Frequency,QuantityTypes.Frequency)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_Division(QuantityTypes.Frequency,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_Division(QuantityTypes.Frequency,QuantityTypes.Frequency)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_Equality(QuantityTypes.Frequency,QuantityTypes.Frequency)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_GreaterThan(QuantityTypes.Frequency,QuantityTypes.Frequency)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_GreaterThanOrEqual(QuantityTypes.Frequency,QuantityTypes.Frequency)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_Inequality(QuantityTypes.Frequency,QuantityTypes.Frequency)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_LessThan(QuantityTypes.Frequency,QuantityTypes.Frequency)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_LessThanOrEqual(QuantityTypes.Frequency,QuantityTypes.Frequency)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_Multiply(System.Double,QuantityTypes.Frequency)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_Multiply(QuantityTypes.Frequency,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_Subtraction(QuantityTypes.Frequency,QuantityTypes.Frequency)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_UnaryPlus(QuantityTypes.Frequency)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.op_UnaryNegation(QuantityTypes.Frequency)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.CompareTo(QuantityTypes.Frequency)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Frequency"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Frequency"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Frequency.ConvertTo(QuantityTypes.Frequency)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.Equals(QuantityTypes.Frequency)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Frequency"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Frequency"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Frequency.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Frequency.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Frequency.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Frequency.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Frequency.Hertz">
            <summary>
            Gets the "Hz" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Frequency.RevolutionsPerMinute">
            <summary>
            Gets the "rpm" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Frequency.XmlValue">
            <summary>
            Gets or sets the frequency as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Frequency.Value">
            <summary>
            Gets the value of the frequency in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.FuelConsumption">
            <summary>
            Represents the fuel consumption quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.FuelConsumption.LitrePer100KilometreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.FuelConsumption.LitrePer100Kilometre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.FuelConsumption.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.FuelConsumption"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.FuelConsumption"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.FuelConsumption"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.FuelConsumption"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.FuelConsumption@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.FuelConsumption"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_Addition(QuantityTypes.FuelConsumption,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_Division(QuantityTypes.FuelConsumption,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_Division(QuantityTypes.FuelConsumption,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_Equality(QuantityTypes.FuelConsumption,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_GreaterThan(QuantityTypes.FuelConsumption,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_GreaterThanOrEqual(QuantityTypes.FuelConsumption,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_Inequality(QuantityTypes.FuelConsumption,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_LessThan(QuantityTypes.FuelConsumption,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_LessThanOrEqual(QuantityTypes.FuelConsumption,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_Multiply(System.Double,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_Multiply(QuantityTypes.FuelConsumption,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_Subtraction(QuantityTypes.FuelConsumption,QuantityTypes.FuelConsumption)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_UnaryPlus(QuantityTypes.FuelConsumption)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.op_UnaryNegation(QuantityTypes.FuelConsumption)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.CompareTo(QuantityTypes.FuelConsumption)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.FuelConsumption"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.FuelConsumption"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.ConvertTo(QuantityTypes.FuelConsumption)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.Equals(QuantityTypes.FuelConsumption)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.FuelConsumption"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.FuelConsumption"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelConsumption.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.FuelConsumption.LitrePer100Kilometre">
            <summary>
            Gets the "l/100km" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.FuelConsumption.XmlValue">
            <summary>
            Gets or sets the fuel consumption as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.FuelConsumption.Value">
            <summary>
            Gets the value of the fuel consumption in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.FuelEconomy">
            <summary>
            Represents the fuel economy quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.FuelEconomy.KilometrePerLitreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.FuelEconomy.KilometrePerLitre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.FuelEconomy.MilesPerGallonField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.FuelEconomy.MilesPerGallon"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.FuelEconomy.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.FuelEconomy"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.FuelEconomy"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.FuelEconomy"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.FuelEconomy"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.FuelEconomy@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.FuelEconomy"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_Addition(QuantityTypes.FuelEconomy,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_Division(QuantityTypes.FuelEconomy,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_Division(QuantityTypes.FuelEconomy,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_Equality(QuantityTypes.FuelEconomy,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_GreaterThan(QuantityTypes.FuelEconomy,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_GreaterThanOrEqual(QuantityTypes.FuelEconomy,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_Inequality(QuantityTypes.FuelEconomy,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_LessThan(QuantityTypes.FuelEconomy,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_LessThanOrEqual(QuantityTypes.FuelEconomy,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_Multiply(System.Double,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_Multiply(QuantityTypes.FuelEconomy,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_Subtraction(QuantityTypes.FuelEconomy,QuantityTypes.FuelEconomy)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_UnaryPlus(QuantityTypes.FuelEconomy)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.op_UnaryNegation(QuantityTypes.FuelEconomy)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.CompareTo(QuantityTypes.FuelEconomy)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.FuelEconomy"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.FuelEconomy"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.ConvertTo(QuantityTypes.FuelEconomy)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.Equals(QuantityTypes.FuelEconomy)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.FuelEconomy"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.FuelEconomy"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.FuelEconomy.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.FuelEconomy.KilometrePerLitre">
            <summary>
            Gets the "km/l" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.FuelEconomy.MilesPerGallon">
            <summary>
            Gets the "mpg" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.FuelEconomy.XmlValue">
            <summary>
            Gets or sets the fuel economy as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.FuelEconomy.Value">
            <summary>
            Gets the value of the fuel economy in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.HeatCapacity">
            <summary>
            Represents the heat capacity quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.HeatCapacity.JoulePerKelvinField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.HeatCapacity.JoulePerKelvin"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.HeatCapacity.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.HeatCapacity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.HeatCapacity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.HeatCapacity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.HeatCapacity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.HeatCapacity@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.HeatCapacity"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_Addition(QuantityTypes.HeatCapacity,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_Division(QuantityTypes.HeatCapacity,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_Division(QuantityTypes.HeatCapacity,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_Equality(QuantityTypes.HeatCapacity,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_GreaterThan(QuantityTypes.HeatCapacity,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_GreaterThanOrEqual(QuantityTypes.HeatCapacity,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_Inequality(QuantityTypes.HeatCapacity,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_LessThan(QuantityTypes.HeatCapacity,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_LessThanOrEqual(QuantityTypes.HeatCapacity,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_Multiply(System.Double,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_Multiply(QuantityTypes.HeatCapacity,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_Subtraction(QuantityTypes.HeatCapacity,QuantityTypes.HeatCapacity)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_UnaryPlus(QuantityTypes.HeatCapacity)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.op_UnaryNegation(QuantityTypes.HeatCapacity)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.CompareTo(QuantityTypes.HeatCapacity)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.HeatCapacity"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.HeatCapacity"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.ConvertTo(QuantityTypes.HeatCapacity)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.Equals(QuantityTypes.HeatCapacity)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.HeatCapacity"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.HeatCapacity"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.HeatCapacity.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.HeatCapacity.JoulePerKelvin">
            <summary>
            Gets the "J/K" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.HeatCapacity.XmlValue">
            <summary>
            Gets or sets the heat capacity as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.HeatCapacity.Value">
            <summary>
            Gets the value of the heat capacity in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Illuminance">
            <summary>
            Represents the illuminance quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Illuminance.LuxField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Illuminance.Lux"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Illuminance.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Illuminance.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Illuminance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Illuminance.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Illuminance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Illuminance.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Illuminance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Illuminance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Illuminance@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Illuminance"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_Addition(QuantityTypes.Illuminance,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_Division(QuantityTypes.Illuminance,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_Division(QuantityTypes.Illuminance,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_Equality(QuantityTypes.Illuminance,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_GreaterThan(QuantityTypes.Illuminance,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_GreaterThanOrEqual(QuantityTypes.Illuminance,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_Inequality(QuantityTypes.Illuminance,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_LessThan(QuantityTypes.Illuminance,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_LessThanOrEqual(QuantityTypes.Illuminance,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_Multiply(System.Double,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_Multiply(QuantityTypes.Illuminance,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_Subtraction(QuantityTypes.Illuminance,QuantityTypes.Illuminance)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_UnaryPlus(QuantityTypes.Illuminance)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.op_UnaryNegation(QuantityTypes.Illuminance)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.CompareTo(QuantityTypes.Illuminance)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Illuminance"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Illuminance"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.ConvertTo(QuantityTypes.Illuminance)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.Equals(QuantityTypes.Illuminance)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Illuminance"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Illuminance"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Illuminance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Illuminance.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Illuminance.Lux">
            <summary>
            Gets the "lx" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Illuminance.XmlValue">
            <summary>
            Gets or sets the illuminance as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Illuminance.Value">
            <summary>
            Gets the value of the illuminance in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Inductance">
            <summary>
            Represents the inductance quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Inductance.HenryField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Inductance.Henry"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Inductance.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Inductance.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Inductance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Inductance.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Inductance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Inductance.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Inductance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Inductance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Inductance@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Inductance.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Inductance"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_Addition(QuantityTypes.Inductance,QuantityTypes.Inductance)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_Division(QuantityTypes.Inductance,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_Division(QuantityTypes.Inductance,QuantityTypes.Inductance)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_Equality(QuantityTypes.Inductance,QuantityTypes.Inductance)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_GreaterThan(QuantityTypes.Inductance,QuantityTypes.Inductance)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_GreaterThanOrEqual(QuantityTypes.Inductance,QuantityTypes.Inductance)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_Inequality(QuantityTypes.Inductance,QuantityTypes.Inductance)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_LessThan(QuantityTypes.Inductance,QuantityTypes.Inductance)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_LessThanOrEqual(QuantityTypes.Inductance,QuantityTypes.Inductance)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_Multiply(System.Double,QuantityTypes.Inductance)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_Multiply(QuantityTypes.Inductance,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_Subtraction(QuantityTypes.Inductance,QuantityTypes.Inductance)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_UnaryPlus(QuantityTypes.Inductance)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.op_UnaryNegation(QuantityTypes.Inductance)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.CompareTo(QuantityTypes.Inductance)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Inductance"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Inductance"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Inductance.ConvertTo(QuantityTypes.Inductance)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.Equals(QuantityTypes.Inductance)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Inductance"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Inductance"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Inductance.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Inductance.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Inductance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Inductance.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Inductance.Henry">
            <summary>
            Gets the "H" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Inductance.XmlValue">
            <summary>
            Gets or sets the inductance as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Inductance.Value">
            <summary>
            Gets the value of the inductance in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.InformationEntropy">
            <summary>
            Represents the information entropy quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.InformationEntropy.JoulePerKelvinField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.InformationEntropy.JoulePerKelvin"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.InformationEntropy.ByteField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.InformationEntropy.Byte"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.InformationEntropy.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.InformationEntropy"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.InformationEntropy"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.InformationEntropy"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.InformationEntropy"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.InformationEntropy@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.InformationEntropy"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_Addition(QuantityTypes.InformationEntropy,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_Division(QuantityTypes.InformationEntropy,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_Division(QuantityTypes.InformationEntropy,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_Equality(QuantityTypes.InformationEntropy,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_GreaterThan(QuantityTypes.InformationEntropy,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_GreaterThanOrEqual(QuantityTypes.InformationEntropy,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_Inequality(QuantityTypes.InformationEntropy,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_LessThan(QuantityTypes.InformationEntropy,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_LessThanOrEqual(QuantityTypes.InformationEntropy,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_Multiply(System.Double,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_Multiply(QuantityTypes.InformationEntropy,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_Subtraction(QuantityTypes.InformationEntropy,QuantityTypes.InformationEntropy)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_UnaryPlus(QuantityTypes.InformationEntropy)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.op_UnaryNegation(QuantityTypes.InformationEntropy)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.CompareTo(QuantityTypes.InformationEntropy)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.InformationEntropy"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.InformationEntropy"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.ConvertTo(QuantityTypes.InformationEntropy)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.Equals(QuantityTypes.InformationEntropy)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.InformationEntropy"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.InformationEntropy"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.InformationEntropy.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.InformationEntropy.JoulePerKelvin">
            <summary>
            Gets the "J/K" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.InformationEntropy.Byte">
            <summary>
            Gets the "B" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.InformationEntropy.XmlValue">
            <summary>
            Gets or sets the information entropy as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.InformationEntropy.Value">
            <summary>
            Gets the value of the information entropy in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.KinematicViscosity">
            <summary>
            Represents the kinematic viscosity quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.KinematicViscosity.SquareMetrePerSecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.KinematicViscosity.SquareMetrePerSecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.KinematicViscosity.SquareMillimetrePerSecondField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.KinematicViscosity.SquareMillimetrePerSecond"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.KinematicViscosity.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.KinematicViscosity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.KinematicViscosity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.KinematicViscosity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.KinematicViscosity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.KinematicViscosity@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.KinematicViscosity"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_Addition(QuantityTypes.KinematicViscosity,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_Division(QuantityTypes.KinematicViscosity,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_Division(QuantityTypes.KinematicViscosity,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_Equality(QuantityTypes.KinematicViscosity,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_GreaterThan(QuantityTypes.KinematicViscosity,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_GreaterThanOrEqual(QuantityTypes.KinematicViscosity,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_Inequality(QuantityTypes.KinematicViscosity,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_LessThan(QuantityTypes.KinematicViscosity,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_LessThanOrEqual(QuantityTypes.KinematicViscosity,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_Multiply(System.Double,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_Multiply(QuantityTypes.KinematicViscosity,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_Subtraction(QuantityTypes.KinematicViscosity,QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_UnaryPlus(QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.op_UnaryNegation(QuantityTypes.KinematicViscosity)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.CompareTo(QuantityTypes.KinematicViscosity)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.KinematicViscosity"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.KinematicViscosity"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.ConvertTo(QuantityTypes.KinematicViscosity)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.Equals(QuantityTypes.KinematicViscosity)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.KinematicViscosity"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.KinematicViscosity"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.KinematicViscosity.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.KinematicViscosity.SquareMetrePerSecond">
            <summary>
            Gets the "m^2/s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.KinematicViscosity.SquareMillimetrePerSecond">
            <summary>
            Gets the "mm^2/s" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.KinematicViscosity.XmlValue">
            <summary>
            Gets or sets the kinematic viscosity as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.KinematicViscosity.Value">
            <summary>
            Gets the value of the kinematic viscosity in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Length">
            <summary>
            Represents the length quantity.
            </summary>
            <summary>
                Provides operators related to length.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.MetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Metre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.DecimetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Decimetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.CentimetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Centimetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.MillimetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Millimetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.KilometreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Kilometre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.YardField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Yard"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.FootField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Foot"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.InchField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Inch"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.MileField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Mile"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.NauticalMileField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.NauticalMile"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.ÅngströmField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.Ångström"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.AstronomicalUnitField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.AstronomicalUnit"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.LightYearField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Length.LightYear"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Length.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Length.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Length"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Length.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Length"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Length.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Length"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Length"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Length@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Length.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Length"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Addition(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Division(QuantityTypes.Length,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Division(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Equality(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_GreaterThan(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_GreaterThanOrEqual(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Inequality(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_LessThan(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_LessThanOrEqual(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Multiply(System.Double,QuantityTypes.Length)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Multiply(QuantityTypes.Length,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Subtraction(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_UnaryPlus(QuantityTypes.Length)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_UnaryNegation(QuantityTypes.Length)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.CompareTo(QuantityTypes.Length)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Length"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Length"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Length.ConvertTo(QuantityTypes.Length)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.Equals(QuantityTypes.Length)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Length"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Length"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Length.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Length.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Length.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Division(QuantityTypes.Length,QuantityTypes.Time)">
            <summary>
                Implements the operator /.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_ExclusiveOr(QuantityTypes.Length,System.Int32)">
            <summary>
                Implements the operator ^.
            </summary>
            <param name="x"> The x. </param>
            <param name="exp"> The exponent. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Multiply(QuantityTypes.Length,QuantityTypes.Length)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Multiply(QuantityTypes.Length,QuantityTypes.Area)">
            <summary>
                Implements the operator *.
            </summary>
            <param name="x"> The x. </param>
            <param name="y"> The y. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Division(QuantityTypes.Length,QuantityTypes.TimeSquared)">
            <summary>
            Implements the / operator for the product of <see cref="T:QuantityTypes.Acceleration"/> and <see cref="T:QuantityTypes.TimeSquared"/>.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Implicit(QuantityTypes.TypographicLength)~QuantityTypes.Length">
            <summary>
            Performs an implicit conversion from <see cref="T:QuantityTypes.TypographicLength"/> to <see cref="T:QuantityTypes.Length"/>.
            </summary>
            <param name="x">The quantity to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:QuantityTypes.Length.op_Implicit(QuantityTypes.Length)~QuantityTypes.TypographicLength">
            <summary>
            Performs an implicit conversion from <see cref="T:QuantityTypes.Length"/> to <see cref="T:QuantityTypes.TypographicLength"/>.
            </summary>
            <param name="x">The quantity to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:QuantityTypes.Length.Cubed">
            <summary>
                Cubes this length.
            </summary>
            <returns> The volume. </returns>
        </member>
        <member name="M:QuantityTypes.Length.Squared">
            <summary>
                Squares this length.
            </summary>
            <returns> The area. </returns>
        </member>
        <member name="P:QuantityTypes.Length.Metre">
            <summary>
            Gets the "m" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.Decimetre">
            <summary>
            Gets the "dm" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.Centimetre">
            <summary>
            Gets the "cm" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.Millimetre">
            <summary>
            Gets the "mm" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.Kilometre">
            <summary>
            Gets the "km" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.Yard">
            <summary>
            Gets the "yd" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.Foot">
            <summary>
            Gets the "ft" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.Inch">
            <summary>
            Gets the "in" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.Mile">
            <summary>
            Gets the "mi" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.NauticalMile">
            <summary>
            Gets the "nmi" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.Ångström">
            <summary>
            Gets the "Å" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.AstronomicalUnit">
            <summary>
            Gets the "AU" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.LightYear">
            <summary>
            Gets the "ly" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Length.XmlValue">
            <summary>
            Gets or sets the length as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Length.Value">
            <summary>
            Gets the value of the length in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Luminance">
            <summary>
            Represents the luminance quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Luminance.CandelaPerSquareMetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Luminance.CandelaPerSquareMetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Luminance.LambertField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Luminance.Lambert"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Luminance.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Luminance.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Luminance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Luminance.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Luminance"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Luminance.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Luminance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Luminance"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Luminance@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Luminance.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Luminance"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_Addition(QuantityTypes.Luminance,QuantityTypes.Luminance)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_Division(QuantityTypes.Luminance,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_Division(QuantityTypes.Luminance,QuantityTypes.Luminance)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_Equality(QuantityTypes.Luminance,QuantityTypes.Luminance)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_GreaterThan(QuantityTypes.Luminance,QuantityTypes.Luminance)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_GreaterThanOrEqual(QuantityTypes.Luminance,QuantityTypes.Luminance)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_Inequality(QuantityTypes.Luminance,QuantityTypes.Luminance)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_LessThan(QuantityTypes.Luminance,QuantityTypes.Luminance)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_LessThanOrEqual(QuantityTypes.Luminance,QuantityTypes.Luminance)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_Multiply(System.Double,QuantityTypes.Luminance)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_Multiply(QuantityTypes.Luminance,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_Subtraction(QuantityTypes.Luminance,QuantityTypes.Luminance)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_UnaryPlus(QuantityTypes.Luminance)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.op_UnaryNegation(QuantityTypes.Luminance)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.CompareTo(QuantityTypes.Luminance)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Luminance"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Luminance"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Luminance.ConvertTo(QuantityTypes.Luminance)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.Equals(QuantityTypes.Luminance)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Luminance"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Luminance"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Luminance.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Luminance.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Luminance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Luminance.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Luminance.CandelaPerSquareMetre">
            <summary>
            Gets the "cd/m^2" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Luminance.Lambert">
            <summary>
            Gets the "L" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Luminance.XmlValue">
            <summary>
            Gets or sets the luminance as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Luminance.Value">
            <summary>
            Gets the value of the luminance in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.LuminousFlux">
            <summary>
            Represents the luminous flux quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.LuminousFlux.LumenField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.LuminousFlux.Lumen"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.LuminousFlux.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.LuminousFlux"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.LuminousFlux"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.LuminousFlux"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.LuminousFlux"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.LuminousFlux@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.LuminousFlux"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_Addition(QuantityTypes.LuminousFlux,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_Division(QuantityTypes.LuminousFlux,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_Division(QuantityTypes.LuminousFlux,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_Equality(QuantityTypes.LuminousFlux,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_GreaterThan(QuantityTypes.LuminousFlux,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_GreaterThanOrEqual(QuantityTypes.LuminousFlux,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_Inequality(QuantityTypes.LuminousFlux,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_LessThan(QuantityTypes.LuminousFlux,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_LessThanOrEqual(QuantityTypes.LuminousFlux,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_Multiply(System.Double,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_Multiply(QuantityTypes.LuminousFlux,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_Subtraction(QuantityTypes.LuminousFlux,QuantityTypes.LuminousFlux)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_UnaryPlus(QuantityTypes.LuminousFlux)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.op_UnaryNegation(QuantityTypes.LuminousFlux)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.CompareTo(QuantityTypes.LuminousFlux)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.LuminousFlux"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.LuminousFlux"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.ConvertTo(QuantityTypes.LuminousFlux)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.Equals(QuantityTypes.LuminousFlux)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.LuminousFlux"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.LuminousFlux"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousFlux.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.LuminousFlux.Lumen">
            <summary>
            Gets the "lm" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.LuminousFlux.XmlValue">
            <summary>
            Gets or sets the luminous flux as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.LuminousFlux.Value">
            <summary>
            Gets the value of the luminous flux in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.LuminousIntensity">
            <summary>
            Represents the luminous intensity quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.LuminousIntensity.CandelaField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.LuminousIntensity.Candela"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.LuminousIntensity.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.LuminousIntensity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.LuminousIntensity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.LuminousIntensity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.LuminousIntensity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.LuminousIntensity@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.LuminousIntensity"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_Addition(QuantityTypes.LuminousIntensity,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_Division(QuantityTypes.LuminousIntensity,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_Division(QuantityTypes.LuminousIntensity,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_Equality(QuantityTypes.LuminousIntensity,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_GreaterThan(QuantityTypes.LuminousIntensity,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_GreaterThanOrEqual(QuantityTypes.LuminousIntensity,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_Inequality(QuantityTypes.LuminousIntensity,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_LessThan(QuantityTypes.LuminousIntensity,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_LessThanOrEqual(QuantityTypes.LuminousIntensity,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_Multiply(System.Double,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_Multiply(QuantityTypes.LuminousIntensity,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_Subtraction(QuantityTypes.LuminousIntensity,QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_UnaryPlus(QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.op_UnaryNegation(QuantityTypes.LuminousIntensity)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.CompareTo(QuantityTypes.LuminousIntensity)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.LuminousIntensity"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.LuminousIntensity"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.ConvertTo(QuantityTypes.LuminousIntensity)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.Equals(QuantityTypes.LuminousIntensity)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.LuminousIntensity"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.LuminousIntensity"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.LuminousIntensity.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.LuminousIntensity.Candela">
            <summary>
            Gets the "cd" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.LuminousIntensity.XmlValue">
            <summary>
            Gets or sets the luminous intensity as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.LuminousIntensity.Value">
            <summary>
            Gets the value of the luminous intensity in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.MagneticFlux">
            <summary>
            Represents the magnetic flux quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.MagneticFlux.WeberField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.MagneticFlux.Weber"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.MagneticFlux.MaxwellField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.MagneticFlux.Maxwell"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.MagneticFlux.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.MagneticFlux"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.MagneticFlux"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.MagneticFlux"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.MagneticFlux"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.MagneticFlux@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.MagneticFlux"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_Addition(QuantityTypes.MagneticFlux,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_Division(QuantityTypes.MagneticFlux,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_Division(QuantityTypes.MagneticFlux,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_Equality(QuantityTypes.MagneticFlux,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_GreaterThan(QuantityTypes.MagneticFlux,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_GreaterThanOrEqual(QuantityTypes.MagneticFlux,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_Inequality(QuantityTypes.MagneticFlux,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_LessThan(QuantityTypes.MagneticFlux,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_LessThanOrEqual(QuantityTypes.MagneticFlux,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_Multiply(System.Double,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_Multiply(QuantityTypes.MagneticFlux,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_Subtraction(QuantityTypes.MagneticFlux,QuantityTypes.MagneticFlux)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_UnaryPlus(QuantityTypes.MagneticFlux)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.op_UnaryNegation(QuantityTypes.MagneticFlux)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.CompareTo(QuantityTypes.MagneticFlux)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.MagneticFlux"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.MagneticFlux"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.ConvertTo(QuantityTypes.MagneticFlux)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.Equals(QuantityTypes.MagneticFlux)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.MagneticFlux"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.MagneticFlux"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFlux.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.MagneticFlux.Weber">
            <summary>
            Gets the "Wb" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.MagneticFlux.Maxwell">
            <summary>
            Gets the "Mx" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.MagneticFlux.XmlValue">
            <summary>
            Gets or sets the magnetic flux as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.MagneticFlux.Value">
            <summary>
            Gets the value of the magnetic flux in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.MagneticFluxDensity">
            <summary>
            Represents the magnetic flux density quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.MagneticFluxDensity.TeslaField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.MagneticFluxDensity.Tesla"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.MagneticFluxDensity.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.MagneticFluxDensity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.MagneticFluxDensity"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.MagneticFluxDensity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.MagneticFluxDensity"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.MagneticFluxDensity@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.MagneticFluxDensity"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_Addition(QuantityTypes.MagneticFluxDensity,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_Division(QuantityTypes.MagneticFluxDensity,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_Division(QuantityTypes.MagneticFluxDensity,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_Equality(QuantityTypes.MagneticFluxDensity,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_GreaterThan(QuantityTypes.MagneticFluxDensity,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_GreaterThanOrEqual(QuantityTypes.MagneticFluxDensity,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_Inequality(QuantityTypes.MagneticFluxDensity,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_LessThan(QuantityTypes.MagneticFluxDensity,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_LessThanOrEqual(QuantityTypes.MagneticFluxDensity,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_Multiply(System.Double,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_Multiply(QuantityTypes.MagneticFluxDensity,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_Subtraction(QuantityTypes.MagneticFluxDensity,QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_UnaryPlus(QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.op_UnaryNegation(QuantityTypes.MagneticFluxDensity)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.CompareTo(QuantityTypes.MagneticFluxDensity)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.MagneticFluxDensity"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.MagneticFluxDensity"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.ConvertTo(QuantityTypes.MagneticFluxDensity)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.Equals(QuantityTypes.MagneticFluxDensity)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.MagneticFluxDensity"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.MagneticFluxDensity"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.MagneticFluxDensity.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.MagneticFluxDensity.Tesla">
            <summary>
            Gets the "T" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.MagneticFluxDensity.XmlValue">
            <summary>
            Gets or sets the magnetic flux density as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.MagneticFluxDensity.Value">
            <summary>
            Gets the value of the magnetic flux density in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Power">
            <summary>
            Represents the power quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Power.WattField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Power.Watt"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Power.HorsePowerField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Power.HorsePower"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Power.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Power.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Power"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Power.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Power"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Power.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Power"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Power"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Power@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Power.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Power"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_Addition(QuantityTypes.Power,QuantityTypes.Power)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_Division(QuantityTypes.Power,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_Division(QuantityTypes.Power,QuantityTypes.Power)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_Equality(QuantityTypes.Power,QuantityTypes.Power)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_GreaterThan(QuantityTypes.Power,QuantityTypes.Power)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_GreaterThanOrEqual(QuantityTypes.Power,QuantityTypes.Power)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_Inequality(QuantityTypes.Power,QuantityTypes.Power)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_LessThan(QuantityTypes.Power,QuantityTypes.Power)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_LessThanOrEqual(QuantityTypes.Power,QuantityTypes.Power)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_Multiply(System.Double,QuantityTypes.Power)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_Multiply(QuantityTypes.Power,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_Subtraction(QuantityTypes.Power,QuantityTypes.Power)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_UnaryPlus(QuantityTypes.Power)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.op_UnaryNegation(QuantityTypes.Power)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.CompareTo(QuantityTypes.Power)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Power"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Power"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Power.ConvertTo(QuantityTypes.Power)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.Equals(QuantityTypes.Power)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Power"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Power"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Power.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Power.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Power.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Power.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Power.Watt">
            <summary>
            Gets the "W" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Power.HorsePower">
            <summary>
            Gets the "hp" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Power.XmlValue">
            <summary>
            Gets or sets the power as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Power.Value">
            <summary>
            Gets the value of the power in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Radiation">
            <summary>
            Represents the radiation quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Radiation.BecquerelField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Radiation.Becquerel"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Radiation.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Radiation.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Radiation"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Radiation.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Radiation"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Radiation.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Radiation"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Radiation"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Radiation@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Radiation.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Radiation"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_Addition(QuantityTypes.Radiation,QuantityTypes.Radiation)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_Division(QuantityTypes.Radiation,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_Division(QuantityTypes.Radiation,QuantityTypes.Radiation)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_Equality(QuantityTypes.Radiation,QuantityTypes.Radiation)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_GreaterThan(QuantityTypes.Radiation,QuantityTypes.Radiation)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_GreaterThanOrEqual(QuantityTypes.Radiation,QuantityTypes.Radiation)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_Inequality(QuantityTypes.Radiation,QuantityTypes.Radiation)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_LessThan(QuantityTypes.Radiation,QuantityTypes.Radiation)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_LessThanOrEqual(QuantityTypes.Radiation,QuantityTypes.Radiation)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_Multiply(System.Double,QuantityTypes.Radiation)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_Multiply(QuantityTypes.Radiation,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_Subtraction(QuantityTypes.Radiation,QuantityTypes.Radiation)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_UnaryPlus(QuantityTypes.Radiation)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.op_UnaryNegation(QuantityTypes.Radiation)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.CompareTo(QuantityTypes.Radiation)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Radiation"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Radiation"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Radiation.ConvertTo(QuantityTypes.Radiation)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.Equals(QuantityTypes.Radiation)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Radiation"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Radiation"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Radiation.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Radiation.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Radiation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Radiation.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Radiation.Becquerel">
            <summary>
            Gets the "Bq" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Radiation.XmlValue">
            <summary>
            Gets or sets the radiation as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Radiation.Value">
            <summary>
            Gets the value of the radiation in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.RadiationAbsorbedDose">
            <summary>
            Represents the radiation absorbed dose quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.RadiationAbsorbedDose.GrayField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.RadiationAbsorbedDose.Gray"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.RadiationAbsorbedDose.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.RadiationAbsorbedDose"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.RadiationAbsorbedDose"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.RadiationAbsorbedDose"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.RadiationAbsorbedDose"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.RadiationAbsorbedDose@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.RadiationAbsorbedDose"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_Addition(QuantityTypes.RadiationAbsorbedDose,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_Division(QuantityTypes.RadiationAbsorbedDose,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_Division(QuantityTypes.RadiationAbsorbedDose,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_Equality(QuantityTypes.RadiationAbsorbedDose,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_GreaterThan(QuantityTypes.RadiationAbsorbedDose,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_GreaterThanOrEqual(QuantityTypes.RadiationAbsorbedDose,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_Inequality(QuantityTypes.RadiationAbsorbedDose,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_LessThan(QuantityTypes.RadiationAbsorbedDose,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_LessThanOrEqual(QuantityTypes.RadiationAbsorbedDose,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_Multiply(System.Double,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_Multiply(QuantityTypes.RadiationAbsorbedDose,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_Subtraction(QuantityTypes.RadiationAbsorbedDose,QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_UnaryPlus(QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.op_UnaryNegation(QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.CompareTo(QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.RadiationAbsorbedDose"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.RadiationAbsorbedDose"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.ConvertTo(QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.Equals(QuantityTypes.RadiationAbsorbedDose)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.RadiationAbsorbedDose"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.RadiationAbsorbedDose"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationAbsorbedDose.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.RadiationAbsorbedDose.Gray">
            <summary>
            Gets the "Gy" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.RadiationAbsorbedDose.XmlValue">
            <summary>
            Gets or sets the radiation absorbed dose as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.RadiationAbsorbedDose.Value">
            <summary>
            Gets the value of the radiation absorbed dose in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.RadiationEquivalentDose">
            <summary>
            Represents the radiation equivalent dose quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.RadiationEquivalentDose.SievertField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.RadiationEquivalentDose.Sievert"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.RadiationEquivalentDose.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.RadiationEquivalentDose"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.RadiationEquivalentDose"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.RadiationEquivalentDose"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.RadiationEquivalentDose"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.RadiationEquivalentDose@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.RadiationEquivalentDose"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_Addition(QuantityTypes.RadiationEquivalentDose,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_Division(QuantityTypes.RadiationEquivalentDose,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_Division(QuantityTypes.RadiationEquivalentDose,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_Equality(QuantityTypes.RadiationEquivalentDose,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_GreaterThan(QuantityTypes.RadiationEquivalentDose,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_GreaterThanOrEqual(QuantityTypes.RadiationEquivalentDose,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_Inequality(QuantityTypes.RadiationEquivalentDose,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_LessThan(QuantityTypes.RadiationEquivalentDose,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_LessThanOrEqual(QuantityTypes.RadiationEquivalentDose,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_Multiply(System.Double,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_Multiply(QuantityTypes.RadiationEquivalentDose,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_Subtraction(QuantityTypes.RadiationEquivalentDose,QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_UnaryPlus(QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.op_UnaryNegation(QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.CompareTo(QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.RadiationEquivalentDose"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.RadiationEquivalentDose"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.ConvertTo(QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.Equals(QuantityTypes.RadiationEquivalentDose)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.RadiationEquivalentDose"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.RadiationEquivalentDose"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationEquivalentDose.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.RadiationEquivalentDose.Sievert">
            <summary>
            Gets the "Sv" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.RadiationEquivalentDose.XmlValue">
            <summary>
            Gets or sets the radiation equivalent dose as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.RadiationEquivalentDose.Value">
            <summary>
            Gets the value of the radiation equivalent dose in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.RadiationExposure">
            <summary>
            Represents the radiation exposure quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.RadiationExposure.RoentgenField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.RadiationExposure.Roentgen"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.RadiationExposure.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.RadiationExposure"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.RadiationExposure"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.RadiationExposure"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.RadiationExposure"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.RadiationExposure@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.RadiationExposure"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_Addition(QuantityTypes.RadiationExposure,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_Division(QuantityTypes.RadiationExposure,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_Division(QuantityTypes.RadiationExposure,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_Equality(QuantityTypes.RadiationExposure,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_GreaterThan(QuantityTypes.RadiationExposure,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_GreaterThanOrEqual(QuantityTypes.RadiationExposure,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_Inequality(QuantityTypes.RadiationExposure,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_LessThan(QuantityTypes.RadiationExposure,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_LessThanOrEqual(QuantityTypes.RadiationExposure,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_Multiply(System.Double,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_Multiply(QuantityTypes.RadiationExposure,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_Subtraction(QuantityTypes.RadiationExposure,QuantityTypes.RadiationExposure)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_UnaryPlus(QuantityTypes.RadiationExposure)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.op_UnaryNegation(QuantityTypes.RadiationExposure)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.CompareTo(QuantityTypes.RadiationExposure)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.RadiationExposure"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.RadiationExposure"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.ConvertTo(QuantityTypes.RadiationExposure)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.Equals(QuantityTypes.RadiationExposure)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.RadiationExposure"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.RadiationExposure"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RadiationExposure.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.RadiationExposure.Roentgen">
            <summary>
            Gets the "R" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.RadiationExposure.XmlValue">
            <summary>
            Gets or sets the radiation exposure as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.RadiationExposure.Value">
            <summary>
            Gets the value of the radiation exposure in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.RotationalStiffness">
            <summary>
            Represents the rotational stiffness quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.RotationalStiffness.NewtonMetrePerRadianField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.RotationalStiffness.NewtonMetrePerRadian"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.RotationalStiffness.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.RotationalStiffness"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.RotationalStiffness"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.RotationalStiffness"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.RotationalStiffness"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.RotationalStiffness@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.RotationalStiffness"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_Addition(QuantityTypes.RotationalStiffness,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_Division(QuantityTypes.RotationalStiffness,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_Division(QuantityTypes.RotationalStiffness,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_Equality(QuantityTypes.RotationalStiffness,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_GreaterThan(QuantityTypes.RotationalStiffness,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_GreaterThanOrEqual(QuantityTypes.RotationalStiffness,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_Inequality(QuantityTypes.RotationalStiffness,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_LessThan(QuantityTypes.RotationalStiffness,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_LessThanOrEqual(QuantityTypes.RotationalStiffness,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_Multiply(System.Double,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_Multiply(QuantityTypes.RotationalStiffness,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_Subtraction(QuantityTypes.RotationalStiffness,QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_UnaryPlus(QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.op_UnaryNegation(QuantityTypes.RotationalStiffness)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.CompareTo(QuantityTypes.RotationalStiffness)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.RotationalStiffness"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.RotationalStiffness"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.ConvertTo(QuantityTypes.RotationalStiffness)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.Equals(QuantityTypes.RotationalStiffness)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.RotationalStiffness"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.RotationalStiffness"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.RotationalStiffness.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.RotationalStiffness.NewtonMetrePerRadian">
            <summary>
            Gets the "N*m/rad" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.RotationalStiffness.XmlValue">
            <summary>
            Gets or sets the rotational stiffness as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.RotationalStiffness.Value">
            <summary>
            Gets the value of the rotational stiffness in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.SecondMomentOfArea">
            <summary>
            Represents the second moment of area quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.SecondMomentOfArea.MetreToTheFourthField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.SecondMomentOfArea.MetreToTheFourth"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.SecondMomentOfArea.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.SecondMomentOfArea"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.SecondMomentOfArea"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.SecondMomentOfArea"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.SecondMomentOfArea"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.SecondMomentOfArea@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.SecondMomentOfArea"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_Addition(QuantityTypes.SecondMomentOfArea,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_Division(QuantityTypes.SecondMomentOfArea,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_Division(QuantityTypes.SecondMomentOfArea,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_Equality(QuantityTypes.SecondMomentOfArea,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_GreaterThan(QuantityTypes.SecondMomentOfArea,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_GreaterThanOrEqual(QuantityTypes.SecondMomentOfArea,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_Inequality(QuantityTypes.SecondMomentOfArea,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_LessThan(QuantityTypes.SecondMomentOfArea,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_LessThanOrEqual(QuantityTypes.SecondMomentOfArea,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_Multiply(System.Double,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_Multiply(QuantityTypes.SecondMomentOfArea,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_Subtraction(QuantityTypes.SecondMomentOfArea,QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_UnaryPlus(QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.op_UnaryNegation(QuantityTypes.SecondMomentOfArea)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.CompareTo(QuantityTypes.SecondMomentOfArea)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.SecondMomentOfArea"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.SecondMomentOfArea"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.ConvertTo(QuantityTypes.SecondMomentOfArea)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.Equals(QuantityTypes.SecondMomentOfArea)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.SecondMomentOfArea"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.SecondMomentOfArea"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SecondMomentOfArea.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.SecondMomentOfArea.MetreToTheFourth">
            <summary>
            Gets the "m^4" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.SecondMomentOfArea.XmlValue">
            <summary>
            Gets or sets the second moment of area as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.SecondMomentOfArea.Value">
            <summary>
            Gets the value of the second moment of area in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.SectionModulus">
            <summary>
            Represents the section modulus quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.SectionModulus.MetreCubedField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.SectionModulus.MetreCubed"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.SectionModulus.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.SectionModulus.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.SectionModulus"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.SectionModulus.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.SectionModulus"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.SectionModulus.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.SectionModulus"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.SectionModulus"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.SectionModulus@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.SectionModulus"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_Addition(QuantityTypes.SectionModulus,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_Division(QuantityTypes.SectionModulus,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_Division(QuantityTypes.SectionModulus,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_Equality(QuantityTypes.SectionModulus,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_GreaterThan(QuantityTypes.SectionModulus,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_GreaterThanOrEqual(QuantityTypes.SectionModulus,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_Inequality(QuantityTypes.SectionModulus,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_LessThan(QuantityTypes.SectionModulus,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_LessThanOrEqual(QuantityTypes.SectionModulus,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_Multiply(System.Double,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_Multiply(QuantityTypes.SectionModulus,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_Subtraction(QuantityTypes.SectionModulus,QuantityTypes.SectionModulus)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_UnaryPlus(QuantityTypes.SectionModulus)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.op_UnaryNegation(QuantityTypes.SectionModulus)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.CompareTo(QuantityTypes.SectionModulus)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.SectionModulus"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.SectionModulus"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.ConvertTo(QuantityTypes.SectionModulus)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.Equals(QuantityTypes.SectionModulus)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.SectionModulus"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.SectionModulus"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.SectionModulus.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SectionModulus.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.SectionModulus.MetreCubed">
            <summary>
            Gets the "m^3" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.SectionModulus.XmlValue">
            <summary>
            Gets or sets the section modulus as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.SectionModulus.Value">
            <summary>
            Gets the value of the section modulus in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.SolidAngle">
            <summary>
            Represents the solid angle quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.SolidAngle.SteradianField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.SolidAngle.Steradian"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.SolidAngle.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.SolidAngle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.SolidAngle"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.SolidAngle.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.SolidAngle"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.SolidAngle.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.SolidAngle"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.SolidAngle"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.SolidAngle@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.SolidAngle"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_Addition(QuantityTypes.SolidAngle,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_Division(QuantityTypes.SolidAngle,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_Division(QuantityTypes.SolidAngle,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_Equality(QuantityTypes.SolidAngle,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_GreaterThan(QuantityTypes.SolidAngle,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_GreaterThanOrEqual(QuantityTypes.SolidAngle,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_Inequality(QuantityTypes.SolidAngle,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_LessThan(QuantityTypes.SolidAngle,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_LessThanOrEqual(QuantityTypes.SolidAngle,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_Multiply(System.Double,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_Multiply(QuantityTypes.SolidAngle,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_Subtraction(QuantityTypes.SolidAngle,QuantityTypes.SolidAngle)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_UnaryPlus(QuantityTypes.SolidAngle)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.op_UnaryNegation(QuantityTypes.SolidAngle)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.CompareTo(QuantityTypes.SolidAngle)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.SolidAngle"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.SolidAngle"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.ConvertTo(QuantityTypes.SolidAngle)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.Equals(QuantityTypes.SolidAngle)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.SolidAngle"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.SolidAngle"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.SolidAngle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.SolidAngle.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.SolidAngle.Steradian">
            <summary>
            Gets the "sr" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.SolidAngle.XmlValue">
            <summary>
            Gets or sets the solid angle as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.SolidAngle.Value">
            <summary>
            Gets the value of the solid angle in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.Stiffness">
            <summary>
            Represents the stiffness quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.Stiffness.NewtonPerMetreField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.Stiffness.NewtonPerMetre"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.Stiffness.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.Stiffness.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Stiffness"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.Stiffness.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Stiffness"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Stiffness.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Stiffness"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.Stiffness"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.Stiffness@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.Stiffness"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_Addition(QuantityTypes.Stiffness,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_Division(QuantityTypes.Stiffness,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_Division(QuantityTypes.Stiffness,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_Equality(QuantityTypes.Stiffness,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_GreaterThan(QuantityTypes.Stiffness,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_GreaterThanOrEqual(QuantityTypes.Stiffness,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_Inequality(QuantityTypes.Stiffness,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_LessThan(QuantityTypes.Stiffness,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_LessThanOrEqual(QuantityTypes.Stiffness,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_Multiply(System.Double,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_Multiply(QuantityTypes.Stiffness,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_Subtraction(QuantityTypes.Stiffness,QuantityTypes.Stiffness)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_UnaryPlus(QuantityTypes.Stiffness)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.op_UnaryNegation(QuantityTypes.Stiffness)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.CompareTo(QuantityTypes.Stiffness)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.Stiffness"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Stiffness"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.ConvertTo(QuantityTypes.Stiffness)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.Equals(QuantityTypes.Stiffness)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.Stiffness"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.Stiffness"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.Stiffness.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.Stiffness.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.Stiffness.NewtonPerMetre">
            <summary>
            Gets the "N/m" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.Stiffness.XmlValue">
            <summary>
            Gets or sets the stiffness as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.Stiffness.Value">
            <summary>
            Gets the value of the stiffness in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.TemperatureDifference">
            <summary>
            Represents the temperature difference quantity.
            </summary>
        </member>
        <member name="F:QuantityTypes.TemperatureDifference.DegreeKelvinField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TemperatureDifference.DegreeKelvin"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TemperatureDifference.DegreeCelsiusField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TemperatureDifference.DegreeCelsius"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TemperatureDifference.DegreeFahrenheitField">
            <summary>
            The backing field for the <see cref="P:QuantityTypes.TemperatureDifference.DegreeFahrenheit"/> property.
            </summary>
        </member>
        <member name="F:QuantityTypes.TemperatureDifference.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.TemperatureDifference"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.#ctor(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.TemperatureDifference"/> struct.
            </summary>
            <param name="value">
            The value. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.Parse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity in a specific culture-specific format with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="input"/>. If not specified, the culture of the default <see cref="T:QuantityTypes.UnitProvider"/> is used. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.TemperatureDifference"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.Parse(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Converts a string representation of a quantity with a specific unit provider.
            </summary>
            <param name="input">
            A string that contains the quantity to convert. 
            </param>
            <param name="unitProvider">
            The unit provider. If not specified, the default <see cref="T:QuantityTypes.UnitProvider"/> is used.
            </param>
            <returns>
            A <see cref="T:QuantityTypes.TemperatureDifference"/> that represents the quantity in <paramref name="input"/>. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.TryParse(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider,QuantityTypes.TemperatureDifference@)">
            <summary>
            Tries to parse the specified string.
            </summary>
            <param name="input">The input string.</param>
            <param name="provider">The format provider.</param>
            <param name="unitProvider">The unit provider.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string was parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.ParseJson(System.String)">
            <summary>
            Parses the specified JSON string.
            </summary>
            <param name="input">The JSON input.</param>
            <returns>
            The <see cref="T:QuantityTypes.TemperatureDifference"/> .
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_Addition(QuantityTypes.TemperatureDifference,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">
            The first value. 
            </param>
            <param name="y">
            The second value. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_Division(QuantityTypes.TemperatureDifference,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_Division(QuantityTypes.TemperatureDifference,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_Equality(QuantityTypes.TemperatureDifference,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_GreaterThan(QuantityTypes.TemperatureDifference,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_GreaterThanOrEqual(QuantityTypes.TemperatureDifference,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_Inequality(QuantityTypes.TemperatureDifference,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_LessThan(QuantityTypes.TemperatureDifference,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_LessThanOrEqual(QuantityTypes.TemperatureDifference,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_Multiply(System.Double,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_Multiply(QuantityTypes.TemperatureDifference,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_Subtraction(QuantityTypes.TemperatureDifference,QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">
            The x. 
            </param>
            <param name="y">
            The y. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_UnaryPlus(QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the unary plus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.op_UnaryNegation(QuantityTypes.TemperatureDifference)">
            <summary>
            Implements the unary minus operator.
            </summary>
            <param name="x">
            The x. 
            </param>
            <returns>
            The result of the operator. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.CompareTo(QuantityTypes.TemperatureDifference)">
            <summary>
            Compares this instance to the specified <see cref="T:QuantityTypes.TemperatureDifference"/> and returns an indication of their relative values.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.TemperatureDifference"/> . 
            </param>
            <returns>
            A signed number indicating the relative values of this instance and the other value. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the 
            current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to 
            <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.QuantityTypes#IQuantity#ConvertTo(QuantityTypes.IQuantity)">
            <summary>
            Converts the quantity to the specified unit.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The amount of the specified unit.</returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.ConvertTo(QuantityTypes.TemperatureDifference)">
            <summary>
            Converts to the specified unit.
            </summary>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            The value in the specified unit. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance. 
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.Equals(QuantityTypes.TemperatureDifference)">
            <summary>
            Determines if the specified <see cref="T:QuantityTypes.TemperatureDifference"/> is equal to this instance.
            </summary>
            <param name="other">
            The other <see cref="T:QuantityTypes.TemperatureDifference"/> . 
            </param>
            <returns>
            True if the values are equal. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.MultiplyBy(System.Double)">
            <summary>
            Multiplies by the specified number.
            </summary>
            <param name="x">The number.</param>
            <returns>The new quantity.</returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.Add(QuantityTypes.IQuantity)">
            <summary>
            Adds the specified quantity.
            </summary>
            <param name="x">The quantity to add.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.SetFromString(System.String,QuantityTypes.IUnitProvider)">
            <summary>
            Sets the value from the specified string.
            </summary>
            <param name="s">
            The s. 
            </param>
            <param name="provider">
            The provider. 
            </param>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="M:QuantityTypes.TemperatureDifference.ToString(System.String,System.IFormatProvider,QuantityTypes.IUnitProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">
            The format. 
            </param>
            <param name="formatProvider">
            The format provider. 
            </param>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance. 
            </returns>
        </member>
        <member name="P:QuantityTypes.TemperatureDifference.DegreeKelvin">
            <summary>
            Gets the "K" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TemperatureDifference.DegreeCelsius">
            <summary>
            Gets the "C" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TemperatureDifference.DegreeFahrenheit">
            <summary>
            Gets the "F" unit.
            </summary>
        </member>
        <member name="P:QuantityTypes.TemperatureDifference.XmlValue">
            <summary>
            Gets or sets the temperature difference as a string.
            </summary>
            <value>The string.</value>
            <remarks>
            This property is used for XML serialization.
            </remarks>
        </member>
        <member name="P:QuantityTypes.TemperatureDifference.Value">
            <summary>
            Gets the value of the temperature difference in the base unit.
            </summary>
        </member>
        <member name="T:QuantityTypes.UnitProviderExtensions">
            <summary>
            Provides extension methods for UnitProvider.
            </summary>
        </member>
        <member name="M:QuantityTypes.UnitProviderExtensions.GetUnits``1(QuantityTypes.IUnitProvider)">
            <summary>
            Gets the units of the specified type.
            </summary>
            <typeparam name="T">
            The type of units to get. 
            </typeparam>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <returns>
            A dictionary of units. 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProviderExtensions.TryGetDisplayUnit``1(QuantityTypes.IUnitProvider,``0@,System.String@)">
            <summary>
            Gets the display unit for the specified type.
            </summary>
            <typeparam name="T">
            The unit type. 
            </typeparam>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <param name="unit">
            The unit. 
            </param>
            <param name="unitSymbol">
            The unit symbol. 
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> . 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProviderExtensions.TryGetUnit``1(QuantityTypes.IUnitProvider,System.String,``0@)">
            <summary>
            Gets the unit that matches the specified name.
            </summary>
            <typeparam name="T">
            The unit type. 
            </typeparam>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <param name="symbol">
            The unit symbol. 
            </param>
            <param name="unit">
            The unit. 
            </param>
            <returns>
            <c>true</c> if the unit name was found, <c>false</c> otherwise 
            </returns>
        </member>
        <member name="M:QuantityTypes.UnitProviderExtensions.TryParse``1(QuantityTypes.IUnitProvider,System.String,System.IFormatProvider,``0@)">
            <summary>
            Parses a string.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="unitProvider">The unit provider.</param>
            <param name="input">The input string.</param>
            <param name="provider">The numeric format provider.</param>
            <param name="unit">The unit (output).</param>
            <returns>True if the parsing was successful.</returns>
        </member>
        <member name="M:QuantityTypes.UnitProviderExtensions.TrySetDisplayUnit``1(QuantityTypes.IUnitProvider,System.String)">
            <summary>
            Sets the display unit.
            </summary>
            <typeparam name="T">
            The quantity type. 
            </typeparam>
            <param name="unitProvider">
            The unit provider. 
            </param>
            <param name="symbol">
            The unit symbol (must be registered). 
            </param>
            <returns>
            <c>true</c> if the unit was set, <c>false</c> otherwise 
            </returns>
        </member>
        <member name="T:QuantityTypes.Csv.CsvWriter">
            <summary>
            Provides TextWriter extension methods for writing csv content.
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.CsvWriter.WriteCsvLine(System.IO.TextWriter,System.Object[])">
            <summary>
            Writes a CSV line to the specified stream writer using the current culture.
            </summary>
            <param name="w">
            The text writer.
            </param>
            <param name="objects">
            The objects to write.
            </param>
        </member>
        <member name="M:QuantityTypes.Csv.CsvWriter.WriteInvariantCsvLine(System.IO.TextWriter,System.Object[])">
            <summary>
            Writes a CSV line to the specified stream writer using invariant culture.
            </summary>
            <param name="w">
            The text writer.
            </param>
            <param name="objects">
            The objects to write.
            </param>
        </member>
        <member name="M:QuantityTypes.Csv.CsvWriter.WriteCsvLine(System.IO.TextWriter,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Writes a CSV line to the specified stream writer using the specified culture.
            </summary>
            <param name="w">
            The text writer.
            </param>
            <param name="culture">
            The culture.
            </param>
            <param name="objects">
            The objects to write.
            </param>
        </member>
        <member name="M:QuantityTypes.Csv.CsvWriter.WriteCsvLine(System.IO.TextWriter,System.Globalization.CultureInfo,System.Char,System.Object[])">
            <summary>
            Writes a CSV line to the specified stream writer using the specified culture and quote character.
            </summary>
            <param name="w">
            The text writer.
            </param>
            <param name="culture">
            The culture.
            </param>
            <param name="quote">
            The quote.
            </param>
            <param name="objects">
            The objects to write.
            </param>
        </member>
        <member name="M:QuantityTypes.Csv.CsvWriter.Format(System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Formats the specified objects to a csv string using the specified culture.
            </summary>
            <param name="culture">
            The culture.
            </param>
            <param name="objects">
            The objects.
            </param>
            <returns>
            The csv string.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvWriter.Format(System.Globalization.CultureInfo,System.Char,System.Object[])">
            <summary>
            Formats the specified objects to a csv string using the specified culture and quote character.
            </summary>
            <param name="culture">
            The culture.
            </param>
            <param name="quote">
            The quote character.
            </param>
            <param name="objects">
            The objects.
            </param>
            <returns>
            The csv string.
            </returns>
        </member>
        <member name="T:QuantityTypes.Csv.CsvIgnoreAttribute">
            <summary>
            Specifies that a property should be ignored in comma separated file output.
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.CsvIgnoreAttribute.IsIgnored(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property should be ignored.
            </summary>
            <param name="propertyInfo">
            The property descriptor.
            </param>
            <returns>
            A <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvIgnoreAttribute.IsNotIgnored(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property should not be ignored.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns>A <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="T:QuantityTypes.Csv.Csv">
            <summary>
            Provides methods to read and write comma separated files with support for units.
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.IsUndefined(System.Object)">
            <summary>
            Determines whether the specified value is undefined.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if the specified value is undefined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.Load``1(System.IO.Stream,System.Globalization.CultureInfo)">
            <summary>
            Loads from the specified stream.
            </summary>
            <typeparam name="T">
            The type of the output items.
            </typeparam>
            <param name="stream">
            The stream.
            </param>
            <param name="cultureInfo">
            The culture info.
            </param>
            <returns>
            An enumeration of the specified type.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.Load``1(System.IO.StreamReader,System.Globalization.CultureInfo)">
            <summary>
            Loads items from the specified <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <typeparam name="T">
            The type of the output items.
            </typeparam>
            <param name="r">
            The input <see cref="T:System.IO.StreamReader"/>.
            </param>
            <param name="cultureInfo">
            The input culture.
            </param>
            <returns>
            A list of items.
            </returns>
            <exception cref="T:System.FormatException">
            Unit not recognized
            </exception>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.LoadQuantities``1(System.IO.Stream,System.Globalization.CultureInfo)">
            <summary>
            Loads a list of quantities from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="T">
            The type of the output items.
            </typeparam>
            <param name="stream">
            The stream.
            </param>
            <param name="cultureInfo">
            The culture info.
            </param>
            <returns>
            An enumeration of the specified type.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.LoadQuantities``1(System.IO.StreamReader,System.Globalization.CultureInfo)">
            <summary>
            Loads quantities from the specified <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <typeparam name="T">
            The type of the output items.
            </typeparam>
            <param name="r">
            The input <see cref="T:System.IO.StreamReader"/>.
            </param>
            <param name="cultureInfo">
            The culture.
            </param>
            <returns>
            A list of items.
            </returns>
            <exception cref="T:System.FormatException">
            Unit not recognized
            </exception>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.Save``1(System.Collections.Generic.IEnumerable{``0},System.IO.Stream,System.Globalization.CultureInfo)">
            <summary>
            Saves the specified items to the specified stream.
            </summary>
            <typeparam name="T">
            The type of the items
            </typeparam>
            <param name="items">
            The items.
            </param>
            <param name="stream">
            The stream.
            </param>
            <param name="cultureInfo">
            The culture info.
            </param>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.Save``1(System.Collections.Generic.IEnumerable{``0},System.IO.StreamWriter,System.Globalization.CultureInfo)">
            <summary>
            Saves the items to the specified <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <typeparam name="T">
            The type of the items
            </typeparam>
            <param name="items">
            The items.
            </param>
            <param name="streamWriter">
            The <see cref="T:System.IO.StreamWriter"/>.
            </param>
            <param name="cultureInfo">
            The output culture.
            </param>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.SaveQuantities``1(System.Collections.Generic.IEnumerable{``0},System.IO.Stream,System.Globalization.CultureInfo)">
            <summary>
            Saves the specified items to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="T">
            The type of the items
            </typeparam>
            <param name="items">
            The items.
            </param>
            <param name="stream">
            The output <see cref="T:System.IO.Stream"/>.
            </param>
            <param name="cultureInfo">
            The output culture.
            </param>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.SaveQuantities``1(System.Collections.Generic.IEnumerable{``0},System.IO.StreamWriter,System.Globalization.CultureInfo)">
            <summary>
            Saves the quantities to the specified <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <typeparam name="T">
            The type of the items
            </typeparam>
            <param name="items">
            The items.
            </param>
            <param name="streamWriter">
            The output <see cref="T:System.IO.StreamWriter"/>.
            </param>
            <param name="cultureInfo">
            The output culture.
            </param>
        </member>
        <member name="M:QuantityTypes.Csv.Csv.ChangeType(System.String,System.Type,QuantityTypes.IQuantity,System.IFormatProvider)">
            <summary>
            Converts a string to the specified type.
            </summary>
            <param name="s">
            The input string.
            </param>
            <param name="type">
            The target type.
            </param>
            <param name="unit">
            The unit (only used if type is an IQuantity).
            </param>
            <param name="provider">
            The provider.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="T:QuantityTypes.Csv.CsvColumnAttribute">
            <summary>
            Specifies the column index in a comma separated file file.
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.CsvColumnAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Csv.CsvColumnAttribute"/> class.
            </summary>
            <param name="column">
            The column.
            </param>
        </member>
        <member name="M:QuantityTypes.Csv.CsvColumnAttribute.GetColumn(System.Reflection.PropertyInfo)">
            <summary>
            Gets the column from the specified property descriptor.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns>The column.</returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvColumnAttribute.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj"/> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj"/>. Greater than zero This instance follows <paramref name="obj"/> in the sort order.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvColumnAttribute.CompareTo(QuantityTypes.Csv.CsvColumnAttribute)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">
            An object to compare with this instance.
            </param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other"/> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="other"/>. Greater than zero This instance follows <paramref name="other"/> in the sort order.
            </returns>
        </member>
        <member name="P:QuantityTypes.Csv.CsvColumnAttribute.Column">
            <summary>
            Gets or sets the column.
            </summary>
            <value>
            The column.
            </value>
        </member>
        <member name="T:QuantityTypes.Csv.CsvFile">
            <summary>
            Represents a comma separated file that supports units and reflection of the rows.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/Comma-separated_values">Comma-separated values</a>.
            </remarks>
        </member>
        <member name="F:QuantityTypes.Csv.CsvFile.QuantityType">
            <summary>
            The quantity type
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:QuantityTypes.Csv.CsvFile"/> class from being created.
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.Load``1(System.Collections.Generic.IEnumerable{``0},QuantityTypes.IUnitProvider)">
            <summary>
            Loads the specified items into a <see cref="T:QuantityTypes.Csv.CsvFile"/>.
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="items">The items.</param>
            <param name="unitProvider">The unit provider.</param>
            <returns>A <see cref="T:QuantityTypes.Csv.CsvFile"/>.</returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.Load(System.IO.Stream,System.Globalization.CultureInfo)">
            <summary>
            Loads from the specified stream.
            </summary>
            <param name="s">The stream.</param>
            <param name="cultureInfo">The culture info.</param>
            <returns>
            A <see cref="T:QuantityTypes.Csv.CsvFile"/>.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.Load(System.IO.StreamReader,System.Globalization.CultureInfo)">
            <summary>
            Loads from the specified stream reader.
            </summary>
            <param name="s">The stream reader.</param>
            <param name="cultureInfo">The culture info.</param>
            <returns>
            A <see cref="T:QuantityTypes.Csv.CsvFile"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">s;The stream reader must be specified.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid header.</exception>
            <exception cref="T:System.FormatException">Wrong number of columns on line  + lineNumber</exception>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.GetQuantityType(System.Type)">
            <summary>
            Gets the (underlying) quantity type or null if the type is not a quantity type.
            </summary>
            <param name="type">The type.</param>
            <returns>The quantity type, or null.</returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.Save(System.IO.Stream,System.Globalization.CultureInfo,QuantityTypes.IUnitProvider)">
            <summary>
            Saves the csv file to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The output <see cref="T:System.IO.Stream"/>.</param>
            <param name="cultureInfo">The output culture.</param>
            <param name="unitProvider">The unit provider.</param>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.Save(System.IO.StreamWriter,System.Globalization.CultureInfo,QuantityTypes.IUnitProvider)">
            <summary>
            Saves the csv file to the specified <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="streamWriter">The output <see cref="T:System.IO.StreamWriter"/>.</param>
            <param name="cultureInfo">The output culture.</param>
            <param name="unitProvider">The unit provider.</param>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.SplitLine(System.String,System.Char)">
            <summary>
            Splits a line by the specified separator.
            </summary>
            <param name="line">
            The line.
            </param>
            <param name="separator">
            The separator.
            </param>
            <returns>
            An array of strings.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.SplitHeader(System.String,System.String@,System.String@)">
            <summary>
            Splits a header string in property name and unit.
            </summary>
            <param name="header">
            The header.
            </param>
            <param name="name">
            The property name.
            </param>
            <param name="unit">
            The unit.
            </param>
        </member>
        <member name="P:QuantityTypes.Csv.CsvFile.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:QuantityTypes.Csv.CsvFile.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="T:QuantityTypes.Csv.CsvFile.CsvColumn">
            <summary>
            Represents a column in the <see cref="T:QuantityTypes.Csv.CsvFile"/>.
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.CsvColumn.#ctor(System.String,System.String,System.Type,QuantityTypes.IUnitProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Csv.CsvFile.CsvColumn"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="unit">The unit.</param>
            <param name="type">The type.</param>
            <param name="unitProvider">The unit provider.</param>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.CsvColumn.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.CsvColumn.Convert(System.String,System.IFormatProvider)">
            <summary>
            Converts the specified string to the type specified in this column.
            </summary>
            <param name="input">
            The input string.
            </param>
            <param name="provider">
            The provider.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="P:QuantityTypes.Csv.CsvFile.CsvColumn.Unit">
            <summary>
            Gets the unit.
            </summary>
            <value>
            The unit.
            </value>
        </member>
        <member name="P:QuantityTypes.Csv.CsvFile.CsvColumn.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:QuantityTypes.Csv.CsvFile.CsvColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:QuantityTypes.Csv.CsvFile.CsvRow">
            <summary>
            Represents a row in the <see cref="T:QuantityTypes.Csv.CsvFile"/>.
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.CsvRow.#ctor(QuantityTypes.Csv.CsvFile)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.Csv.CsvFile.CsvRow"/> class.
            </summary>
            <param name="file">
            The file.
            </param>
        </member>
        <member name="P:QuantityTypes.Csv.CsvFile.CsvRow.File">
            <summary>
            Gets the file.
            </summary>
            <value>The file.</value>
        </member>
        <member name="P:QuantityTypes.Csv.CsvFile.CsvRow.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
            <remarks>
            The indices corresponds to the columns in the parent <see cref="T:QuantityTypes.Csv.CsvFile"/>.
            </remarks>
        </member>
        <member name="T:QuantityTypes.Csv.CsvFile.ValueList">
            <summary>
            Represents a list of values.
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.CsvFile.ValueList.GetSmallestCommonType(System.IFormatProvider)">
            <summary>
            Gets the smallest common type (<see cref="T:System.Int32"/>, <see cref="T:System.Double"/> or <see cref="T:System.String"/>).
            </summary>
            <param name="provider">
            The format provider.
            </param>
            <returns>
            The smallest type (<see cref="T:System.Int32"/>, <see cref="T:System.Double"/> or <see cref="T:System.String"/>) of the list.
            </returns>
        </member>
        <member name="T:QuantityTypes.Csv.CsvParser">
            <summary>
            Provides static csv parser methods.
            </summary>
        </member>
        <member name="M:QuantityTypes.Csv.CsvParser.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="culture">
            The culture.
            </param>
            <returns>
            A sequence of records.
            </returns>
        </member>
        <member name="M:QuantityTypes.Csv.CsvParser.Parse(System.String,System.Char,System.Char)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="separator">
            The separator character.
            </param>
            <param name="quote">
            The quote character.
            </param>
            <returns>
            A sequence of records.
            </returns>
        </member>
        <member name="T:QuantityTypes.MemoryStreamWriter">
            <summary>
            Provides a stream writer that writes to a memory stream.
            </summary>
        </member>
        <member name="M:QuantityTypes.MemoryStreamWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.MemoryStreamWriter"/> class using UTF8 encoding.
            </summary>
        </member>
        <member name="M:QuantityTypes.MemoryStreamWriter.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantityTypes.MemoryStreamWriter"/> class with the specified encoding.
            </summary>
            <param name="encoding">
            The encoding.
            </param>
        </member>
        <member name="M:QuantityTypes.MemoryStreamWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the content of this stream.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this stream.
            </returns>
        </member>
    </members>
</doc>
